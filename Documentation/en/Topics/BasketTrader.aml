<?xml version="1.0" encoding="utf-8"?>
<topic id="1cfb4f7c-b9fc-43da-a958-b0e0f881479d" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			Для работы одновременно с несколькими <codeEntityReference>T:StockSharp.BusinessEntities.IConnector</codeEntityReference>, <token>stocksharp</token>
			предоставляет класс <codeEntityReference>T:StockSharp.Algo.BasketTrader</codeEntityReference>. Например, когда робот одновременно ведет торговлю через
			<token>quik</token> и <token>smartcom</token>. Или, с несколькими <token>quik</token>-ами, как показано в разделе <link xlink:href="9fb00dd4-4f0a-42a9-ab0f-9946b7acf6fe"/>.
		</para>
		<para>
			<codeEntityReference>T:StockSharp.Algo.BasketTrader</codeEntityReference> скрывает в себе детали параллельной работы с несколькими торговыми системами,
			позволяя роботу работать так, будто он соединен лишь с одной. Это позволяет сократить код робота и избежать лишних проверок.
		</para>
    </introduction>

    <prerequisites>
      <content>
        <para>
			<link xlink:href="87d2cacd-5492-4bca-9140-7d7c3f5218d7">Архитектура S#.API</link>
		</para>
      </content>
    </prerequisites>
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Работа с BasketTrader</title>

      <steps class="ordered">
		  <step>
			  <content>
				  <para>
					  К примеру, работа идет по схеме <token>quik</token> + <token>smartcom</token>. Для этого, необходимо создать шлюзы к этим торговым системам:
				  </para>
				  <code language="C#">var quikTrader = new QuikTrader(path);
var smartTrader = new SmartTrader(login, password);</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Далее, необходимо создать <codeEntityReference>T:StockSharp.Algo.BasketTrader</codeEntityReference> и передать в него созданные шлюзы
					  через свойство <codeEntityReference qualifyHint="true">P:StockSharp.Algo.BasketTrader.InnerTraders</codeEntityReference>:
				  </para>
				  <code language="C#">// создаем агрегирующий шлюз
this.Trader = new BasketTrader();

// создаем шлюзы к SmartCOM и Quik (+ сразу инициализируем настройки переподключения)
var smartTrader = InitReconnectionSettings(new SmartTrader(this.SmartLogin.Text, this.SmartPassword.Password));
var quikTrader = InitReconnectionSettings(new QuikTrader(this.QuikPath.Text));

// добавляем шлюзы к SmartCOM и Quik
Trader.InnerTraders.Add(smartTrader);
Trader.InnerTraders.Add(quikTrader);
</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Через созданный <codeEntityReference>T:StockSharp.Algo.BasketTrader</codeEntityReference> работа с двумя шлюзами ведется как с одним:
				  </para>
				  <code language="C#">
	<![CDATA[// подписываемся на событие успешного соединения
Trader.Connected += () =>
{
	// возводим флаг, что соединение установлено
	_isConnected = true;

	// разблокируем кнопку Экспорт
	this.Sync(() => ChangeConnectStatus(true));
};

// подписываемся на событие разрыва соединения
Trader.ConnectionError += error => this.Sync(() =>
{
	// заблокируем кнопку Экспорт (так как соединение было потеряно)
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), "Ошибка соединения");	
});

Trader.ProcessDataError += error => this.Sync(() => MessageBox.Show(this, error.ToString(), "Ошибка обработки данных"));

Trader.NewSecurities += securities => this.Sync(() => _securitiesWindow.AddSecurities(securities));
Trader.NewOrders += orders => this.Sync(() => _ordersWindow.Orders.AddRange(orders));
Trader.NewPortfolios += portfolios =>
{
	// регистрирует портфели на обновление данных
	portfolios.ForEach(Trader.RegisterPortfolio);
};

// подписываемся на событие о неудачной регистрации заявок
Trader.OrdersRegisterFailed += OrdersFailed;
// подписываемся на событие о неудачном снятии заявок
Trader.OrdersCancelFailed += OrdersFailed;

// подписываемся на событие о неудачной регистрации стоп-заявок
Trader.StopOrdersRegisterFailed += OrdersFailed;
// подписываемся на событие о неудачном снятии стоп-заявок
Trader.StopOrdersCancelFailed += OrdersFailed;

Trader.Connect();]]></code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Или регистрация новой заявки, которая автоматически перенаправляется в нужный шлюз по портфелю:
				  </para>
				  <code language="C#"><![CDATA[var order = new Order
{
	Type = (bool)IsMarket.IsChecked ? OrderTypes.Market : OrderTypes.Limit,
	Portfolio = (Portfolio)Portfolio.SelectedValue,
	Volume = Volume.Text.To<int>(),
	Price = Price.Text.To<decimal>(),
	Security = Security,
	Direction = IsBuy.IsChecked == true ? OrderDirections.Buy : OrderDirections.Sell,
};

MainWindow.Instance.Trader.RegisterOrder(order);]]></code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Пример <legacyItalic>SampleQuikSmart</legacyItalic> в работе выглядит следующим образом:
				  </para>
				  <mediaLink>
					  <image placement="center" xlink:href="samplequiksmart" />
				  </mediaLink>
			  </content>
		  </step>
      </steps>
    </procedure>

	  <!-- <section>
      <title>Optional section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <nextSteps>
      <content>
        <para>
			<link xlink:href="a8486498-a2d8-4924-b009-8b93138b268a">Арифметические операции</link>
		</para>
      </content>
    </nextSteps>
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>