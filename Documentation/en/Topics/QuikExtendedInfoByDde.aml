<?xml version="1.0" encoding="utf-8"?>
<topic id="4261879e-9bb3-482c-9fc5-27ecb07bdf5e" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			<codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference> в целях оптимизации экспортирует только минимальный набор данных из
			стандартных таблиц (Инструменты, Заявки и т.д.). Если для алгоритма необходимы данные из дополнительных колонок (или же требуется изменить порядок
			колонок, например, в таблице Инструменты размер лота идет сразу за название инструмента), то для этого существуют 2 варианта решения:
		</para>
		<list class="ordered">
			<listItem>
				Добавить отдельную таблицу в <token>quik</token>, которая будет дублировать существующую. Такую таблицу можно менять полностью,
				и это не отразиться на экспорте <token>dde</token>, так как экспорт будет идти по первой таблице. Единственное ограничение такого
				подхода - такие таблицы не должны иметь одинаковый заголовок.
			</listItem>
			<listItem>
				Поменять существующую таблицу. А так же изменить метаданные, описывающие экспорт <token>dde</token>. Ниже рассмотрен пример такого сценария.
			</listItem>
		</list>
    </introduction>

    <prerequisites>
      <content>
        <para>
			<link xlink:href="5c13da7b-b6e4-4fd4-958a-66c93c58b941">Настройка Quik</link>
		  <!--<link xlink:href="448078e0-339b-4817-a97a-210b1ad2966f">Модификация стандартных таблиц</link>-->
		</para>
      </content>
    </prerequisites>
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Экспорт дополнительных колонок</title>

		<steps class="ordered">
		  <step>
			<content>
			  <para>
				Пример работает с фьючерсными и опционными контрактами, и показывает как экспортировать колонки Волатильность, Теоретическая Цена, Базовый актив и 
				Стоимость шага цены (пункт). Дополнительно, пример работает с расширенным стаканом, получая информацию о собственных объемах в котировках.
			  </para>
			  <alert class="note">
				<para>Исходные коды примера лежат в папке <legacyItalic>Samples\Quik\DDE\SampleDdeExtendedInfo</legacyItalic>. Файл настроек для <token>quik</token>
				называется info_extended.wnd.</para>
			  </alert>
			</content>
		  </step>
		  
			<step>
				<content>
					<para>
						Вначале, необходимо настроить таблицу Инструменты:
					</para>
					<!--<alert class="caution">
						<para>
							Все дополнительные колонки необходимо добавлять только после основных колонок, которые используются <codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference>.
							Список основных колонок для кажной таблицы описан <link xlink:href="5c13da7b-b6e4-4fd4-958a-66c93c58b941">Настройка Quik</link>.
						</para>
					</alert>-->
					<mediaLink>
						<image placement="center" xlink:href="securitiesex" />
					</mediaLink>
				</content>
			</step>
			
		  <step>
			<content>
			  <para>
				А так же окно со стаканом:
			  </para>
			  <mediaLink>
				<image placement="center" xlink:href="quotesex" />
			  </mediaLink>
			  <alert class="note">
				Пример работает с инструментом Лукойл. Для использования других инструментов необходимо настроить окна со стаканами по аналогии.
			  </alert>
			</content>
		  </step>
		  
			<step>
				<content>
					<para>
						Далее, необходимо изменить метаданные для инструментов и стаканов. Это делается через таблицу <codeEntityReference>T:StockSharp.Quik.DdeTable</codeEntityReference>.
						Для каждого типа торгового объекта существует своя отдельная таблица с метаданными, которые получаются через <codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference>:
					</para>
					<table>
						<title>Таблицы и метаданные</title>
						<tableHeader>
							<row>
								<entry>Название таблицы</entry>
								<entry>Свойство с метаданными</entry>
							</row>
						</tableHeader>
						<row>
							<entry>Инструменты</entry>
							<entry>
								<codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.SecuritiesTable</codeEntityReference>
							</entry>
						</row>
						<row>
							<entry>Мои сделки</entry>
							<entry>
								<codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.MyTradesTable</codeEntityReference>
							</entry>
						</row>
						<row>
							<entry>Все сделки</entry>
							<entry>
								<codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.TradesTable</codeEntityReference>
							</entry>
						</row>
						<row>
							<entry>Заявки</entry>
							<entry>
								<codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.OrdersTable</codeEntityReference>
							</entry>
						</row>
						<row>
							<entry>Стоп-заявки</entry>
							<entry>
								<codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.StopOrdersTable</codeEntityReference>
							</entry>
						</row>
						<row>
							<entry>Портфель по бумагам</entry>
							<entry>
								<codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.EquityPortfoliosTable</codeEntityReference>
							</entry>
						</row>
						<row>
							<entry>Портфель по деривативам</entry>
							<entry>
								<codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.DerivativePortfoliosTable</codeEntityReference>
							</entry>
						</row>
						<row>
							<entry>Позиции по бумагам</entry>
							<entry>
								<codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.EquityPositionsTable</codeEntityReference>
							</entry>
						</row>
						<row>
							<entry>Позиции по деривативам</entry>
							<entry>
								<codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.DerivativePositionsTable</codeEntityReference>
							</entry>
						</row>
						<row>
							<entry>Стакан</entry>
							<entry>
								<codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.QuotesTable</codeEntityReference>
							</entry>
						</row>
					</table>
					<para>
					  Через <codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.SecuritiesTable</codeEntityReference>
					  и <codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.QuotesTable</codeEntityReference> добавляются
					  требуемые колонки в том порядке, в которым они были добавлены в <token>quik</token>:
					</para>
					  <code language="C#">// добавляем на экспорт необходимые колонки
this.Trader.SecuritiesTable.Columns.Add(DdeSecurityColumns.Volatility);
this.Trader.SecuritiesTable.Columns.Add(DdeSecurityColumns.TheorPrice);
this.Trader.SecuritiesTable.Columns.Add(DdeSecurityColumns.BaseSecurity);
this.Trader.SecuritiesTable.Columns.Add(DdeSecurityColumns.MinStepPrice);

// добавляем экспорт дополнительных колонок из стакана (своя продажа и покупка)
this.Trader.QuotesTable.Columns.Add(DdeQuoteColumns.OwnAskVolume);
this.Trader.QuotesTable.Columns.Add(DdeQuoteColumns.OwnBidVolume);</code>
					<para>
						Если колонки добавляются не в конец, а перемешаны с основными колонками, то необходимо вставлять колонки относительно их порядка
						следования друг за другом в таблице:
					</para>
					<code language="C#">// вставить колонку волатильность, чтобы она была 5-ой с начала (нумерация идет с нуля)
// все последующие колонки за волатильностью автоматически перестраивают свой порядковый номер
this.Trader.SecuritiesTable.Columns.Insert(4, DdeSecurityColumns.Volatility);</code>
				</content>
			  </step>
			  
			  <step>
				<content>
				  <para>
					После этого, через события <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewSecurities</codeEntityReference>
					  и <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged</codeEntityReference> будут приходить 
					  объекты <codeEntityReference>T:StockSharp.BusinessEntities.Security</codeEntityReference>, содержащие расширенную информацию. Чтобы
					  ее получить в коде, необходимо воспользоваться свойством <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.ExtensionInfo</codeEntityReference>:
					</para>
					<code language="C#">
Trader.NewSecurities += securities => this.GuiAsync(() => _securitiesWindow.Securities.AddRange(securities));
					</code>
					<alert class="note">
						<para>
							<codeEntityReference>T:StockSharp.BusinessEntities.Security</codeEntityReference> имеет ряд свойств, которые упрощают доступ
							к расширенной информации. Это свойства
							<codeEntityReference>P:StockSharp.BusinessEntities.Security.OpenPrice</codeEntityReference>,
							<codeEntityReference>P:StockSharp.BusinessEntities.Security.ClosePrice</codeEntityReference>,
							<codeEntityReference>P:StockSharp.BusinessEntities.Security.HighPrice</codeEntityReference>,
							<codeEntityReference>P:StockSharp.BusinessEntities.Security.LowPrice</codeEntityReference>,
							<codeEntityReference>P:StockSharp.BusinessEntities.Security.MaxPrice</codeEntityReference>,
							<codeEntityReference>P:StockSharp.BusinessEntities.Security.MinPrice</codeEntityReference>,
							<codeEntityReference>P:StockSharp.BusinessEntities.Security.StepPrice</codeEntityReference>,
							<codeEntityReference>P:StockSharp.BusinessEntities.Security.MarginBuy</codeEntityReference>,
							<codeEntityReference>P:StockSharp.BusinessEntities.Security.MarginSell</codeEntityReference>,
							<codeEntityReference>P:StockSharp.BusinessEntities.Security.ExpiryDate</codeEntityReference> и
							<codeEntityReference>P:StockSharp.BusinessEntities.Security.SettlementDate</codeEntityReference>. Поэтому в примере Стоимость шага
							цены берется не через <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.ExtensionInfo</codeEntityReference>,
							а через <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.StepPrice</codeEntityReference>
						</para>
					</alert>
				</content>
			</step>
		  
		  <step>
			<content>
			  <para>Для стакана данные по собственным объемам будут содержаться в <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Quote.ExtensionInfo</codeEntityReference>,
				  которые в примере для удобства копируются в структуру SampleQuote:</para>
				<code language="C#"><![CDATA[public class SampleQuote
{
	public SampleQuote(Quote quote)
	{
		if (quote == null)
			throw new ArgumentNullException("quote");

		this.Price = quote.Price;

		if (quote.OrderDirection == OrderDirections.Buy)
		{
			this.Bid = quote.Volume.ToString();
			
			// копируем информацию о собственном объеме на покупку
			this.OwnVolume = (decimal)quote.ExtensionInfo[DdeQuoteColumns.OwnBidVolume];
		}
		else
		{
			this.Ask = quote.Volume.ToString();
			
			// копируем информацию о собственном объеме на продажу
			this.OwnVolume = (decimal)quote.ExtensionInfo[DdeQuoteColumns.OwnAskVolume];
		}
	}
}]]></code>
			</content>
		  </step>
			
			<step>
				<content>
					<para>
						В итоге должно получиться следующее:
					</para>
					<mediaLink>
						<image placement="center" xlink:href="samplesecuritiesex" />
					</mediaLink>
					<para>
						И для стакана Лукойл:
					</para>
					<mediaLink>
						<image placement="center" xlink:href="samplequotesex" />
					</mediaLink>
				</content>
			</step>
		</steps>
    </procedure>
    
    

    <nextSteps>
      <content>
        <para>
			<link xlink:href="7d73f7bf-ae8b-4d76-9895-cffb6342203f">Экспорт произвольных таблиц</link>
		</para>
      </content>
    </nextSteps>
    
    <relatedTopics>
      
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>