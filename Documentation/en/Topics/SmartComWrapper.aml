<?xml version="1.0" encoding="utf-8"?>
<topic id="535227b6-0338-44c9-9a9b-9baf9bab10b4" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

	  <introduction>
		  <para>
			  Для отладки программ, написанных с помощью <codeEntityReference>T:StockSharp.SmartCom.SmartTrader</codeEntityReference>, можно использовать
			  <codeEntityReference qualifyHint="true">P:StockSharp.SmartCom.SmartTrader.Wrapper</codeEntityReference>. Данный класс является основой для
			  <codeEntityReference>T:StockSharp.SmartCom.SmartTrader</codeEntityReference>, и реализует минимальное количество логики (корректные названия у
			  аргументов, правильное отключение и подключение к <token>smartcom</token>, использование стиля <token>dotnet</token> и <token>oop</token>
			  для событий и передаваемых значений в них), поэтому использование его практически ничем не отличается от низкоуровневого доступа через API
			  <token>smartcom</token>.
		  </para>
	  </introduction>

    <procedure>
      <title>Пример использования ISmartComWrapper</title>

      <steps class="ordered">
          <step>
			  <content>
				  <para>В начале необходимо создать объект <codeEntityReference>T:StockSharp.SmartCom.SmartTrader</codeEntityReference>,
				  передав в него логин-пароль, с которыми в дальнейшем будет работать <codeEntityReference>T:StockSharp.StockSharp.SmartCom.Native.ISmartComWrapper</codeEntityReference>:
			  </para>
				  <code language="C#">var smartTrader = new SmartTrader { Login = "Логин", Password = "Пароль" };</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Затем получить <codeEntityReference>T:StockSharp.SmartCom.Native.ISmartComWrapper</codeEntityReference>, и подписаться на событие новых инструментов:
				  </para>
				  <code language="C#">var wrapper = smartTrader.Wrapper;
wrapper.NewSecurity += (row, rowCount, securityId, shortName, fullName, type, decimals,
		lotSize, minStepPrice, minStepSize, isin, board, expiryDate, daysBeforeExpiry) =>
{
	Debug.WriteLine(securityId);
};</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  После этого необходимо подключиться к <token>smartcom</token>:
				  </para>
				  <code language="C#">smartTrader.Connect();</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  В итоге программа после успешного соединения выведет в отладочное окно через Debug.WriteLine все идентификаторы инструментов, доступных
					  в <token>smartcom</token>.
				  </para>
			  </content>
		  </step>
      </steps>
    </procedure>
    
    <!--<section>
      <title>Optional section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <!--<nextSteps>
      <content>
        <para>Optional next steps after reading this walk-through</para>
      </content>
    </nextSteps>-->
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>