<?xml version="1.0" encoding="utf-8"?>
<topic id="5d9f8c0d-d05c-4a39-9fad-7148df4411ad" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
   <introduction>
      <para>
      	    Графический компонент <codeEntityReference>T:StockSharp.Xaml.Charting.OptionPositionChart</codeEntityReference> - это график, показывающий позицию
      	    и греки опционов относительно базового актива.
      </para>
      <para>
            Далее показан пример SampleOptionQuoting, в котором используется этот график. Исходные коды примера можно найти в папке <legacyItalic>Samples/Options/SampleOptionQuoting</legacyItalic>.
      </para>
      
      <mediaLink><image placement="left" xlink:href="option_volsmile" /></mediaLink>
   </introduction>
    
               
   <procedure>
	<title>Пример SampleOptionQuoting</title>
		<steps class="ordered">
			<step>
				<content>
					<para>В коде XAML добавляем элемент <codeEntityReference>T:StockSharp.Xaml.Charting.OptionPositionChart</codeEntityReference>
							и присваиваем ему имя <legacyBold>PosChart</legacyBold>.</para>
            		<code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="OptionCalculator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
        xmlns:xaml="http://schemas.stocksharp.com/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        Title="{x:Static loc:LocalizedStrings.XamlStr396}" Height="400" Width="1030">
    <Grid Margin="5,5,5,5">
    
	    .........................................................
	    
	    <xaml:OptionPositionChart x:Name="PosChart" Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="6" />

	</Grid>
</Window>
				]]>
                  	</code>
				</content>
			</step>
			<step>
				<content>
					<para>В коде C# создаем подключение	<codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference>,
							если Quik используется в режиме DDE, то настраиваем дополнительные колонки опционов.</para>
            		<code title="C#" language="C#">
                  <![CDATA[
var isDde = IsDde.IsChecked == true;

if (isDde && Path.Text.IsEmpty())
{
	MessageBox.Show(this, LocalizedStrings.Str2969);
	return;
}

if (Connector != null && !(Connector is FakeConnector))
		return;

// создаем подключение
Connector = new QuikTrader(Path.Text)
{
	IsDde = isDde
};

if (isDde)
{
	// изменяем метаданные так, чтобы начали обрабатывать дополнительные колонки опционов
	var columns = ((QuikTrader)Connector).SecuritiesTable.Columns;
	columns.Add(DdeSecurityColumns.Strike);
	columns.Add(DdeSecurityColumns.ImpliedVolatility);
	columns.Add(DdeSecurityColumns.UnderlyingSecurity);
	columns.Add(DdeSecurityColumns.TheorPrice);
	columns.Add(DdeSecurityColumns.OptionType);
	columns.Add(DdeSecurityColumns.ExpiryDate);
}

]]>
                  	</code>
				</content>
			</step>
			<step>
				<content>
					<para>Задаем первоначальные установки контрола:</para>
						<list class="ordered">
  							<listItem>
  									Обнуляем коллекции позиций опционов
  									<codeEntityReference>P:StockSharp.Xaml.Charting.OptionPositionChart.Positions</codeEntityReference> и подлежащего инструмента
									<codeEntityReference>P:StockSharp.Xaml.Charting.OptionPositionChart.AssetPosition</codeEntityReference> контрола;
							</listItem>
  							<listItem>
  									Перерисовываем график с начальными значениями
									<codeEntityReference>M:StockSharp.Xaml.Charting.OptionPositionChart.Refresh(System.Decimal,System.Decimal,System.DateTimeOffset,System.DateTimeOffset)</codeEntityReference>;
							</listItem>
							  	<listItem>Задаем провайдера сообщений для рыночных данных и инструментов.</listItem>
						</list>
            			<code title="C#" language="C#">
                  <![CDATA[
PosChart.Positions.Clear();
PosChart.AssetPosition = null;
PosChart.Refresh(1, 1, default(DateTimeOffset), default(DateTimeOffset));

PosChart.MarketDataProvider = Connector;
PosChart.SecurityProvider = Connector;


]]>
                  		</code>
					</content>
				</step>
				<step>
					<content>
						<para>При получении инструментов добавляем базовые активы в список.</para>
            			<code title="C#" language="C#">
                  <![CDATA[
Connector.NewSecurities += securities =>
		_assets.AddRange(securities.Where(s => s.Type == SecurityTypes.Future));
]]>
                  		</code>
					</content>
				</step>
				<step>
					<content>
						<para>При изменении Level1 базового инструмента или опционов, а также при получении новой сделки возводим флаг _isDirty. 
							Это позволяет в событии таймера (код, которого опущен) вызывать метод RefreshChart (см. ниже) для перерисовки графика.
							Таким образом мы контролируем частоту перерисовки.</para>
            			<code title="C#" language="C#">
                  <![CDATA[
Connector.SecuritiesChanged += securities =>
{
	if ((PosChart.AssetPosition != null && securities.Contains(PosChart.AssetPosition.Security)) || PosChart.Positions.Cache.Select(p => p.Security).Intersect(securities).Any())
		_isDirty = true;
};

// подписываемся на событие новых сделок чтобы обновить текущую цену фьючерса
Connector.NewTrades += trades =>
{
	var assetPos = PosChart.AssetPosition;
	if (assetPos != null && trades.Any(t => t.Security == assetPos.Security))
		_isDirty = true;
			};
]]>
                  		</code>
					</content>
				</step>
				<step>
					<content>
						<para>В обработчике события появления новой позиции обновляем свойства  
							<codeEntityReference>P:StockSharp.Xaml.Charting.OptionPositionChart.Positions</codeEntityReference> и
							<codeEntityReference>P:StockSharp.Xaml.Charting.OptionPositionChart.AssetPosition</codeEntityReference> контрола. 
							В этом случае, а также при изменении позициии, вызываем перерисовку графика.</para>
            			<code title="C#" language="C#">
                  <![CDATA[
Connector.NewPositions += positions => this.GuiAsync(() =>
{
	var asset = SelectedAsset;

	if (asset == null)
		return;

	var assetPos = positions.FirstOrDefault(p => p.Security == asset);
	var newPos = positions.Where(p => p.Security.UnderlyingSecurityId == asset.Id).ToArray();

	if (assetPos == null && newPos.Length == 0)
		return;

	if (assetPos != null)
		PosChart.AssetPosition = assetPos;

	if (newPos.Length > 0)
		PosChart.Positions.AddRange(newPos);

	RefreshChart();
});

Connector.PositionsChanged += positions => this.GuiAsync(() =>
{
	if ((PosChart.AssetPosition != null && positions.Contains(PosChart.AssetPosition)) || positions.Intersect(PosChart.Positions.Cache).Any())
		RefreshChart();
});

]]>
                 			</code>
						</content>
					</step>
					<step>
					<content>
						<para>Метод вызывает перерисовку графика.</para>
            			<code title="C#" language="C#">
                  <![CDATA[
private void RefreshChart()
{
	var asset = SelectedAsset;
	var trade = asset.LastTrade;

	if (trade != null)
		PosChart.Refresh(trade.Price, asset.PriceStep ?? 1m, TimeHelper.Now, asset.ExpiryDate ?? DateTimeOffset.Now.Date + TimeSpan.FromDays(1));
}

]]>
               		</code>
				</content>
			</step>
		</steps>
 	</procedure>

    <relatedTopics>
		<link xlink:href="6fe5b321-a23d-415d-b3e3-af9de9212a20">Котирование по волатильности</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>