<?xml version="1.0" encoding="utf-8"?>
<topic id="db15f661-eb88-496f-a9f9-0ad4e0043ed3" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
	<introduction>
		<para>Взаимоисключающие правила, это правила которые удаляются по активации одного из этих правил. Для этого вызвается метод
		<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.Exclusive(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule)</codeEntityReference>
		в который передается правило, которое будет удалено при активации данного правила.</para>
		
		<para>Например регистрируется два правила, на успешную и неуспешную регистрацию заявки, одно из них нужно удалить в случае активации другого:</para>
		<code language="C#">
		<![CDATA[
var order = this.CreateOrder(direction, (decimal) Security.GetCurrentPrice(direction), Volume);

var ruleReg = order.WhenRegistered();
var ruleRegFailed = order.WhenRegisterFailed();

ruleReg
    .Do(() => this.AddInfoLog("Заявка успешно зарегестрирована"))
    .Once()
    .Apply(this)
    .Exclusive(ruleRegFailed);

ruleRegFailed
    .Do(() => this.AddInfoLog("Заявка не принята биржей"))
    .Once()
    .Apply(this)
    .Exclusive(ruleReg);

// регистрирация заявки
RegisterOrder(order);
		]]>
		</code>
		
		<para>Также взаимоисключающие правила можно создать через добавление в <codeEntityReference qualifyHint="false">P:StockSharp.Algo.IMarketRule.ExclusiveRules</codeEntityReference></para>

		<code language="C#">
		<![CDATA[
var order = this.CreateOrder(direction, (decimal) Security.GetCurrentPrice(direction), Volume);

var ruleReg = order.WhenRegistered();
var ruleRegFailed = order.WhenRegisterFailed();

ruleReg.ExclusiveRules.Add(ruleRegFailed);
ruleRegFailed.ExclusiveRules.Add(ruleReg);

ruleReg
    .Do(() => this.AddInfoLog("Заявка успешно зарегестрирована"))
    .Once()
    .Apply(this);

ruleRegFailed
    .Do(() => this.AddInfoLog("Заявка не принята биржей"))
    .Once()
    .Apply(this);

// регистрирация заявки
RegisterOrder(order);
		]]>
		</code>
	</introduction>

	</developerWalkthroughDocument>
</topic>