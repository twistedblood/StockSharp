<?xml version="1.0" encoding="utf-8"?>
<topic id="72fddc05-6956-405c-82ec-07c0e3649979" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
		<para>Для регистрации стоп-заявок используется тот же метод <codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference>, 
		но с указанием стоп-условия <codeEntityReference qualifyHint="false">T:StockSharp.Transaq.TransaqOrderCondition</codeEntityReference>
		и типа заявки <codeEntityReference qualifyHint="false">F:StockSharp.Messages.OrderTypes.Conditional</codeEntityReference>:</para>   
		
        <code language="C#">
        <![CDATA[
private void SendClick(object sender, RoutedEventArgs e)
{
	var stopOrder = new Order
	{
		Portfolio = Portfolio.SelectedPortfolio,
		Type = OrderTypes.Conditional,
		Security = Security,
		Direction = IsBuy.IsChecked == true ? OrderDirections.Buy : OrderDirections.Sell,
		ExpiryDate = ExpiryDate.Value == null ? (DateTime?) null : ExpiryDate.Value.Value,
	};

	var condition = new TransaqOrderCondition();

	switch (StopOrderType.SelectedIndex)
	{
		case 0:
			condition.Type = TransaqOrderConditionTypes.StopLoss;
			condition.StopLossActivationPrice = StopLossActivationPrice.Text.To<decimal>();
			condition.StopLossOrderPrice = StopLossOrderPrice.Text == "0" || StopLossOrderPrice.Text == string.Empty ? null : new Unit(StopLossOrderPrice.Text.To<decimal>(), StopLossOrderPricePercent.IsChecked.Value ? UnitTypes.Percent : UnitTypes.Absolute);
			condition.StopLossVolume = new Unit(StopLossVolume.Text.To<decimal>(), StopLossVolumePercent.IsChecked.Value ? UnitTypes.Percent : UnitTypes.Absolute);
			condition.StopLossGuardTime = StopLossGuardTime.Text == "0" || StopLossGuardTime.Text == string.Empty ? (int?)null : StopLossGuardTime.Text.To<int>();
			condition.StopLossByMarket = StopLossByMarket.IsChecked.Value;
			break;

		case 1:
			condition.Type = TransaqOrderConditionTypes.TakeProfit;
			condition.TakeProfitActivationPrice = TakeProfitActivationPrice.Text.To<decimal>();
			condition.TakeProfitVolume = new Unit(TakeProfitVolume.Text.To<decimal>(), TakeProfitVolumePercent.IsChecked.Value ? UnitTypes.Percent : UnitTypes.Absolute);
			condition.TakeProfitCorrection = TakeProfitCorrection.Text == "0" || TakeProfitCorrection.Text == string.Empty ? null : new Unit(TakeProfitCorrection.Text.To<decimal>(), TakeProfitCorrectionPercent.IsChecked.Value ? UnitTypes.Percent : UnitTypes.Absolute);
			condition.TakeProfitGuardSpread = TakeProfitGuardSpread.Text == "0" || TakeProfitGuardSpread.Text == string.Empty ? null : new Unit(TakeProfitGuardSpread.Text.To<decimal>(), TakeProfitGuardSpreadPercent.IsChecked.Value ? UnitTypes.Percent : UnitTypes.Absolute);
			condition.TakeProfitGuardTime = TakeProfitGuardTime.Text == "0" || TakeProfitGuardTime.Text == string.Empty ? (int?) null : TakeProfitGuardTime.Text.To<int>();
			condition.TakeProfitByMarket = TakeProfitByMarket.IsChecked.Value;
			break;

		case 2:
			condition.Type = TransaqOrderConditionTypes.TakeProfitStopLoss;
					
			condition.StopLossActivationPrice = StopLossActivationPrice.Text.To<decimal>();
			condition.StopLossOrderPrice = StopLossOrderPrice.Text == "0" || StopLossOrderPrice.Text == string.Empty ? null : new Unit(StopLossOrderPrice.Text.To<decimal>(), StopLossOrderPricePercent.IsChecked.Value ? UnitTypes.Percent : UnitTypes.Absolute);
			condition.StopLossVolume = new Unit(StopLossVolume.Text.To<decimal>(), StopLossVolumePercent.IsChecked.Value ? UnitTypes.Percent : UnitTypes.Absolute);
			condition.StopLossGuardTime = StopLossGuardTime.Text == "0" || StopLossGuardTime.Text == string.Empty ? (int?)null : StopLossGuardTime.Text.To<int>();
			condition.StopLossByMarket = StopLossByMarket.IsChecked.Value;
					
			condition.TakeProfitActivationPrice = TakeProfitActivationPrice.Text.To<decimal>();
			condition.TakeProfitVolume = new Unit(TakeProfitVolume.Text.To<decimal>(), TakeProfitVolumePercent.IsChecked.Value ? UnitTypes.Percent : UnitTypes.Absolute);
			condition.TakeProfitCorrection = TakeProfitCorrection.Text == "0" || TakeProfitCorrection.Text == string.Empty ? null : new Unit(TakeProfitCorrection.Text.To<decimal>(), TakeProfitCorrectionPercent.IsChecked.Value ? UnitTypes.Percent : UnitTypes.Absolute);
			condition.TakeProfitGuardSpread = TakeProfitGuardSpread.Text == "0" || TakeProfitGuardSpread.Text == string.Empty ? null : new Unit(TakeProfitGuardSpread.Text.To<decimal>(), TakeProfitGuardSpreadPercent.IsChecked.Value ? UnitTypes.Percent : UnitTypes.Absolute);
			condition.TakeProfitGuardTime = TakeProfitGuardTime.Text == "0" || TakeProfitGuardTime.Text == string.Empty ? (int?) null : TakeProfitGuardTime.Text.To<int>();
			condition.TakeProfitByMarket = TakeProfitByMarket.IsChecked.Value;
			break;
	}

	stopOrder.Condition = condition;

	MainWindow.Instance.Trader.RegisterOrder(stopOrder);
	DialogResult = true;
}
		]]>
		</code>		

		<para>Для работы с условиями стоп-заявок коннектор <codeEntityReference qualifyHint="false">T:StockSharp.Transaq.TransaqTrader</codeEntityReference>
		предоставляет специальный класс <codeEntityReference qualifyHint="false">T:StockSharp.Transaq.TransaqOrderCondition</codeEntityReference>.
		Данным классом поддерживаются следующие типы стоп-заявок:</para>

		<list class="bullet">
			<listItem>
				<para>
					<codeEntityReference qualifyHint="false">F:StockSharp.Transaq.TransaqOrderConditionTypes.StopLoss</codeEntityReference> – 
					после достижения цены указанной в <codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.StopLossActivationPrice</codeEntityReference>
					выставляется или лимитная заявка по цене 
					<codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.StopLossOrderPrice</codeEntityReference>, 
					или рыночная заявка, в зависимости от
					<codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.StopLossByMarket</codeEntityReference>, с объемом указанным в
					<codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.StopLossVolume</codeEntityReference>.
				</para>
				<para>
					При указании защитного времени(в секундах) - <codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.StopLossProtectionTime</codeEntityReference>, 
					если цена в течении заданного времени успевает вернутся выше(для sell)/ниже(для buy) 
					<codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.StopLossActivationPrice</codeEntityReference>, то
					<codeEntityReference qualifyHint="false">F:StockSharp.Transaq.TransaqOrderConditionTypes.StopLoss</codeEntityReference> не активируется.
				</para>
			</listItem>
			
			<listItem>
				<para>
					<codeEntityReference qualifyHint="false">F:StockSharp.Transaq.TransaqOrderConditionTypes.TakeProfit</codeEntityReference> –
					после достижения цены указанной в <codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.TakeProfitActivationPrice</codeEntityReference>
					выставляется или лимитная заявка по цене <codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.TakeProfitActivationPrice</codeEntityReference>, 
					с учетом защитного спреда - <codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.TakeProfitProtectionSpread</codeEntityReference>,
					или рыночная заявка, в зависимости от
					<codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.TakeProfitByMarket</codeEntityReference>, с объемом указанным в
					<codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.TakeProfitVolume</codeEntityReference>.
				</para>
				<para>
					При указании защитного времени(в секундах) - <codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.TakeProfitProtectionTime</codeEntityReference>, 
					если цена в течении заданного времени успевает вернутся ниже(для sell)/выше(для buy) 
					<codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.TakeProfitActivationPrice</codeEntityReference>, то
					<codeEntityReference qualifyHint="false">F:StockSharp.Transaq.TransaqOrderConditionTypes.TakeProfit</codeEntityReference> не активируется.
				</para>	
				<para>
					При указании коррекции - <codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.TakeProfitCorrection</codeEntityReference>, 
					после достижения цены указанной в <codeEntityReference qualifyHint="false">P:StockSharp.Transaq.TransaqOrderCondition.TakeProfitActivationPrice</codeEntityReference> 
					лимитная или рыночная заявка выставится только после того, как цена откатится на указанное значение.
				</para>					
			</listItem>
			
			<listItem>
				<para>
					<codeEntityReference qualifyHint="false">F:StockSharp.Transaq.TransaqOrderConditionTypes.TakeProfitStopLoss</codeEntityReference> –
					состоит из <codeEntityReference qualifyHint="false">F:StockSharp.Transaq.TransaqOrderConditionTypes.StopLoss</codeEntityReference> и
					<codeEntityReference qualifyHint="false">F:StockSharp.Transaq.TransaqOrderConditionTypes.TakeProfit</codeEntityReference>.
					При срабатывание одного из условий, второе автоматически отменяется.
				</para>
			</listItem>
		</list>		
    </introduction>
	</developerWalkthroughDocument>
</topic>