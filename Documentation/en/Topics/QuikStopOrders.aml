<?xml version="1.0" encoding="utf-8"?>
<topic id="a82865dd-98ed-4579-8f48-dd8f806c39e7" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

	  <introduction>
		  <para>
			  <codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference> поддерживает работу со всеми типами стоп-заявок <token>quik</token>-а.
			  Стоп-заявки регистрируются, заменяются и снимаются через те же методы, что и обычные заявки:
		  </para>
		  <para>
			  <link xlink:href="b6fea084-f43c-4eb7-ab63-ad3031d748a5">Создание первой стратегии</link>
		  </para>
		  <para>
			  <link xlink:href="6267fec7-64e5-4488-ba08-c72cf61fcc9e">Снятие заявок</link>
		  </para>
		  <para>
			  <link xlink:href="4b427409-9aa9-41d3-bb97-98745d1bba8e">Замена заявок</link>
		  </para>
		  <para>
			  Для получения биржевой заявки, которая была создана стоп-заявкой при активации стоп условия, необходимо использовать свойство
			  <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.DerivedOrder</codeEntityReference>. Данное свойство используется,
			  когда необходимо получить сделки, созданные в рамках стоп-заявки. При этом, сами сделки создаются не по стоп-, а по биржевой заявке, и чтобы их
			  получить, следуют использовать подход вида:
		  </para>
		  <code language="C#">// получаем биржевую заявку по стоп-заявке
var marketOrder = stopOrder.DerivedOrder;

// если биржевая заявка зарегистрирована
if (marketOrder != null)
{
	var trades = trader.GetMyTrades(marketOrder);
	// ...
}</code>
	  </introduction>

    <!--<prerequisites>
      <content>
        <para>Optional information on prerequisites</para>
      </content>
    </prerequisites>-->
    
    <!-- One or more procedure or section elements -->

    <procedure>
		<title>Примеры создания стоп-заявок:</title>

		<steps class="ordered">
			<step>
				<content>
					<para>Выбор нужного типа стоп-заявки:</para>
					<alert class="note">
						<para>Исходные коды примера лежат в дистрибутиве в папке под названием Sample.</para>
					</alert>
					<code language="C#">
<![CDATA[switch (this.StopOrderType.SelectedIndex)
{
	case 0:
		stopOrder = CreateLinkedOrder();
		break;
	case 1:
		stopOrder = CreateStopLimit();
		break;
	case 2:
		stopOrder = CreateOtherSecurity();
		break;
	case 3:
		stopOrder = CreateTakeProfit();
		break;
	case 4:
		stopOrder = CreateTakeProfitAndStopLimit();
		break;
	default:
		throw new InvalidOperationException("Выбран неизвестный тип стоп-заявки.");
}

MainWindow.Instance.NewOrder(stopOrder);]]></code>
				</content>
			</step>
			<step>
				<content>
					<para>Со связанной заявкой:</para>
					<code language="C#">
			<![CDATA[private Order CreateLinkedOrder()
{
	return new Order
	{
		Type = OrderTypes.Conditional,
		Volume = this.Volume.Text.To<int>(),
		Price = this.Price.Text.To<decimal>(),
		Security = this.Security,
		Direction = this.IsBuy.IsChecked == true ? OrderDirections.Buy : OrderDirections.Sell,
		ExpiryDate = this.ExpirationDate.SelectedDate,
		StopCondition = new QuikOrderCondition
		{
			Type = QuikOrderConditionTypes.LinkedOrder,
			LinkedOrderPrice = this.LinkedOrderPrice.Text.To<decimal>(),
			LinkedOrderCancel = (bool)this.LinkedOrderCancel.IsChecked,
			StopPrice = this.StopPrice.Text.To<decimal>(),
			ActiveTime = this.ActiveTime,
		},
	};
}]]></code>
				</content>
			</step>
			<step>
				<content>
					<para>Стоп-лимит:</para>
					<code language="C#">
			<![CDATA[private Order CreateStopLimit()
{
	return new Order
	{
		Type = OrderTypes.Conditional,
		Volume = this.Volume.Text.To<int>(),
		Price = this.Price.Text.To<decimal>(),
		Security = this.Security,
		Direction = this.IsBuy.IsChecked == true ? OrderDirections.Buy : OrderDirections.Sell,
		ExpiryDate = this.ExpirationDate.SelectedDate,
		StopCondition = new QuikOrderCondition
		{
			Type = QuikOrderConditionTypes.StopLimit,
			StopPrice = this.StopPrice.Text.To<decimal>(),
			ActiveTime = this.ActiveTime,
		},
	};
}]]></code>
				</content>
			</step>
			<step>
				<content>
					<para>По другому инструменту:</para>
					<code language="C#">
			<![CDATA[private Order CreateOtherSecurity()
{
	return new Order
	{
		Type = OrderTypes.Conditional,
		Volume = this.Volume.Text.To<int>(),
		Price = this.Price.Text.To<decimal>(),
		Security = this.Security,
		Direction = this.IsBuy.IsChecked == true ? OrderDirections.Buy : OrderDirections.Sell,
		ExpiryDate = this.ExpirationDate.SelectedDate,
		StopCondition = new QuikOrderCondition
		{
			Type = QuikOrderConditionTypes.OtherSecurity,
			StopPriceCondition = this.StopPriceCondition.Text == ">=" ? QuikStopPriceConditions.MoreOrEqual : QuikStopPriceConditions.LessOrEqual,
			StopPrice = this.StopPrice.Text.To<decimal>(),
			OtherSecurityId = ((Security)this.OtherSecurities.SelectedValue).Id,
			ActiveTime = this.ActiveTime,
		},
	};
}]]></code>
				</content>
			</step>
			<step>
				<content>
					<para>Тейк-профит:</para>
					<code language="C#">
			<![CDATA[private Order CreateTakeProfit()
{
	return new Order
	{
		Type = OrderTypes.Conditional,
		Volume = this.Volume.Text.To<int>(),
		Security = this.Security,
		Direction = this.IsBuy.IsChecked == true ? OrderDirections.Buy : OrderDirections.Sell,
		ExpiryDate = this.ExpirationDate.SelectedDate,
		StopCondition = new QuikOrderCondition
		{
			Type = QuikOrderConditionTypes.TakeProfit,
			StopPrice = this.StopPrice.Text.To<decimal>(),
			Offset = this.Offset.Unit,
			Spread = this.Spread.Unit,
			ActiveTime = this.ActiveTime,
		},
	};
}]]></code>
				</content>
			</step>
			<step>
				<content>
					<para>Тейк-профит и стоп-лимит:</para>
					<code language="C#">
			<![CDATA[private Order CreateTakeProfitAndStopLimit()
{
	return new Order
	{
		Type = OrderTypes.Conditional,
		Volume = this.Volume.Text.To<int>(),
		Price = this.Price.Text.To<decimal>(),
		Security = this.Security,
		Direction = this.IsBuy.IsChecked == true ? OrderDirections.Buy : OrderDirections.Sell,
		ExpiryDate = this.ExpirationDate.SelectedDate,
		StopCondition = new QuikOrderCondition
		{
			Type = QuikOrderConditionTypes.TakeProfitStopLimit,
			StopPrice = this.StopPrice.Text.To<decimal>(),
			StopLimitPrice = this.StopLimitPrice.Text.To<decimal>(),
			Offset = this.Offset.Unit,
			Spread = this.Spread.Unit,
			ActiveTime = this.ActiveTime,
		},
	};
}]]></code>
				</content>
			</step>
			<step>
				<content>
					<para>Сама регистрация стоп-заявки:</para>
					<code language="C#"><![CDATA[public void NewOrder(Order order)
{
	if (order == null)
		throw new ArgumentNullException("order");

	order.Portfolio = (Portfolio)this.Portfolios.SelectedValue;
	this.Trader.RegisterOrder(order);
}]]></code>
				</content>
			</step>
			<step>
				<content>
					<para>
						Если необходимо зарегистрировать стоп-заявку "по исполнению", то необходимо присвоить идентификатор активной заявки
						свойству <codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikOrderCondition.ConditionOrderId</codeEntityReference>.
						Ниже показан выбор типа стоп-заявок "по исполнению", которых <token>quik</token> предоставляет меньше, чем для обычных стоп-заявок:
					</para>
					<code language="C#"><![CDATA[switch (this.StopOrderType.SelectedIndex)
{
	case 1:
		stopOrder = CreateConditionStopLimit();
		break;
	case 3:
		stopOrder = CreateConditionTakeProfit();
		break;
	case 4:
		stopOrder = CreateConditionTakeProfitAndStopLimit();
		break;
	default:
		throw new InvalidOperationException("Выбран неизвестный тип стоп-заявки.");
}]]></code>
				</content>
			</step>
			<step>
				<content>
					<para>Стоп-лимит "по исполнению":</para>
					<code language="C#"><![CDATA[private Order CreateConditionStopLimit()
{
	var stopLimit = CreateStopLimit();
	var condition = (QuikOrderCondition)stopLimit.StopCondition;
	condition.ConditionOrderId = this.ConditionOrder.Id;
	condition.ConditionOrderPartiallyMatched = this.PartiallyMatched.IsChecked;
	condition.ConditionOrderUseMatchedBalance = this.UseMatchedBalance.IsChecked;
	return stopLimit;
}]]></code>
					<para>
						Как видно из кода, просто создается обычная стоп-заявка через метод CreateStopLimit, и она
						дозаполняется необходимыми параметрами.
					</para>
					<alert class="caution">
						<para>
							Свойство <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.Direction</codeEntityReference> для стоп-заявок
							"по исполнению" игнорируется, так как такая заявка всегда обратна заявке-условию, передающейся через свойство 
							<codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikOrderCondition.ConditionOrderId</codeEntityReference>,
							и при регистрации автоматически выставляется в правильное значение.
						</para>
					</alert>
				</content>
			</step>
			<step>
				<content>
					<para>Тейк-профит "по исполнению":</para>
					<code language="C#"><![CDATA[private Order CreateConditionTakeProfit()
{
	var stopLimit = CreateTakeProfit();
	var condition = (QuikOrderCondition)stopLimit.StopCondition;
	condition.ConditionOrderId = this.ConditionOrder.Id;
	condition.ConditionOrderPartiallyMatched = this.PartiallyMatched.IsChecked;
	condition.ConditionOrderUseMatchedBalance = this.UseMatchedBalance.IsChecked;
	return stopLimit;
}]]></code>
				</content>
			</step>
			<step>
				<content>
					<para>Тейк-профит и стоп-лимит "по исполнению":</para>
					<code language="C#"><![CDATA[private Order CreateConditionTakeProfitAndStopLimit()
{
	var stopLimit = CreateTakeProfitAndStopLimit();
	var condition = (QuikOrderCondition)stopLimit.StopCondition;
	condition.ConditionOrderId = this.ConditionOrder.Id;
	condition.ConditionOrderPartiallyMatched = this.PartiallyMatched.IsChecked;
	condition.ConditionOrderUseMatchedBalance = this.UseMatchedBalance.IsChecked;
	return stopLimit;
}]]></code>
				</content>
			</step>
			<step>
				<content>
					<para>
						В итоге должно получить следующее:
					</para>
					<mediaLink>
						<image placement="center" xlink:href="samplestoporder" />
					</mediaLink>
				</content>
			</step>
		</steps>
    </procedure>
    
  
    
    <relatedTopics>
     

		<link xlink:href="b6fea084-f43c-4eb7-ab63-ad3031d748a5">Создание первой стратегии</link>
		<link xlink:href="6267fec7-64e5-4488-ba08-c72cf61fcc9e">Снятие заявок</link>
		<link xlink:href="4b427409-9aa9-41d3-bb97-98745d1bba8e">Замена заявок</link>

    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>