<?xml version="1.0" encoding="utf-8"?>
<topic id="bf4d89d7-32a7-4755-beab-3bfd0581db6c" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
   <introduction>
      <para>Пример работы с <codeEntityReference qualifyHint="false">T:StockSharp.Oanda.OandaTrader</codeEntityReference> демонстрирует приложение SampleOanda,
        показанное на рисунке ниже. Исходные коды примера лежат в дистрибутиве в папке <legacyItalic>Samples/Oanda</legacyItalic>.</para>
		<mediaLink><image placement="center" xlink:href="OandaSample"/></mediaLink>
    </introduction>
    <procedure>
		<steps class="ordered">
			<step>
				<content>
					<para>В самом начале необходимо создать экземпляр класса шлюза 
					<codeEntityReference qualifyHint="false">T:StockSharp.Oanda.OandaTrader</codeEntityReference>:</para>
            		<code language="C#">
            				<![CDATA[
// создаем шлюз
Trader = new OandaTrader();
.....
Trader.Token = Token.Password.To<SecureString>();
Trader.Server = IsDemo.IsChecked == true ? OandaServers.Practice : OandaServers.Real;
							]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>Далее следует установить требуемые обработчики событий <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference>:</para>
            		<code language="C#">
            				<![CDATA[

Trader.Restored += () => this.GuiAsync(() =>
{
	// update gui labes
	ChangeConnectStatus(true);
	MessageBox.Show(this, LocalizedStrings.Str2958);
});

// подписываемся на событие успешного соединения
Trader.Connected += () =>
{
	// устанавливаем флаг (соединение установлено)
	_isConnected = true;

	// обновляем пользовательский интерфейс
	this.GuiAsync(() => ChangeConnectStatus(true));
};
					
Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// подписываемся на событие ошибки соединения
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	// обновляем пользовательский интерфейс
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
});

// подписываемся на событие ошибки
Trader.Error += error =>
				this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

// подписываемся на событие ошибки получения рыночных данных
Trader.MarketDataSubscriptionFailed += (security, type, error) =>
				this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(type, security)));

Trader.NewSecurities += securities => _securitiesWindow.SecurityPicker.Securities.AddRange(securities);
Trader.NewMyTrades += trades => _myTradesWindow.TradeGrid.Trades.AddRange(trades);
Trader.NewTrades += trades => _tradesWindow.TradeGrid.Trades.AddRange(trades);
Trader.NewOrders += orders => _ordersWindow.OrderGrid.Orders.AddRange(orders);
Trader.NewStopOrders += orders => _stopOrdersWindow.OrderGrid.Orders.AddRange(orders);
					
Trader.NewPortfolios += portfolios =>
{
	// подписываемся на событие обновления портфеля
	portfolios.ForEach(Trader.RegisterPortfolio);

	_portfoliosWindow.PortfolioGrid.Portfolios.AddRange(portfolios);
};
					
Trader.NewPositions += positions => _portfoliosWindow.PortfolioGrid.Positions.AddRange(positions);

// подписываемся на событие ошибки регистрации заявки
Trader.OrdersRegisterFailed += OrdersFailed;

// подписываемся на событие ошибки отмены заявки
Trader.OrdersCancelFailed += OrdersFailed;

// подписываемся на событие ошибки регистрации стоп-заявки
Trader.StopOrdersRegisterFailed += OrdersFailed;

// подписываемся на событие ошибки отмены стоп-заявки
Trader.StopOrdersCancelFailed += OrdersFailed;

							]]>
					</code>						
				</content>
			</step>
			<step>
				<content>
					<para>Далее необходимо выполнить подключение к серверу <token>oanda</token>:</para>
            		<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
					</code>						
				</content>
			</step>
					
			<step>
				<content>
					<para>После подключения можно ожидать срабатывания событий:</para>
						<list class="bullet">
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged</codeEntityReference> – 
								изменение инструмента (последней цены, цены спроса/предложения и т.д.) запрошенного через 
								<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference>.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.MarketDepthsChanged</codeEntityReference> – 
									изменение стакана, запрошенного с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference>.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrades</codeEntityReference> – 
									новые тики по подписанным с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> инструментам.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.PortfoliosChanged</codeEntityReference> – 
									изменение портфелей, запрошенное с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference>.</para>
							</listItem>
						</list>
				</content>
			</step>

			<step>
				<content>
					<para>Поиск инструментов (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">подробнее</link>):</para>
					<mediaLink><image placement="center" xlink:href="OandaSecurities"/></mediaLink>
            		<code language="C#">
            				<![CDATA[
private void Ok_Click(object sender, RoutedEventArgs e)
{
	var criteria = new Security
	{
		Code = SecCode.Text,
	};

	MainWindow.Instance.Trader.LookupSecurities(criteria);
	DialogResult = true;
}
							]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>Для получения обновлений по выбранному инструменту необходимо вызвать методам
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference>:</para>
            		<code language="C#">
            				<![CDATA[
private void Level1Click(object sender, RoutedEventArgs e)
{
	var security = SecurityPicker.SelectedSecurity;
	var trader = MainWindow.Instance.Trader;

	if (trader.RegisteredSecurities.Contains(security))
	{
		trader.UnRegisterSecurity(security);
	}
	else
	{
		trader.RegisterSecurity(security);
	}
}
							]]>
							</code>						
						</content>
					</step>

				<!--	<step>
						<content>
							<para>Для запроса обновлений по стаканам необходимо воспользоваться методом 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
private void QuotesClick(object sender, RoutedEventArgs e)
{
	var window = _quotesWindows.SafeAdd(SelectedSecurity, security =>
	{
		// начинаем получать котировки стакана
		MainWindow.Instance.Trader.RegisterMarketDepth(security);

		// создаем окно со стаканом
		var wnd = new QuotesWindow { Title = security.Code + " котировки" };
		wnd.MakeHideable();
		return wnd;
	});

	if (window.Visibility == Visibility.Visible)
		window.Hide();
	else
		window.Show();
}
							]]>
							</code>
							<mediaLink><image placement="center" xlink:href="lmax_sample_market_depth"/></mediaLink>
						</content>
					</step> -->

					<step>
						<content>
							<para>Для регистрации заявок предусмотрена кнопка <legacyBold>Новая заявка</legacyBold>. 
							Метод <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference> отправляет заявку на сервер:</para>
            				<code language="C#">
            				<![CDATA[
private void NewOrderClick(object sender, RoutedEventArgs e)
{
	var newOrder = new OrderWindow
	{
		Order = new Order { Security = SecurityPicker.SelectedSecurity },
		Connector = MainWindow.Instance.Trader,
	};

	if (newOrder.ShowModal(this))
		MainWindow.Instance.Trader.RegisterOrder(newOrder.Order);
}
							]]>
							</code>						
						</content>
					</step>

				</steps>
		</procedure>
   
  </developerConceptualDocument>
</topic>