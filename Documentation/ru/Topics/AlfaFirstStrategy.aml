<?xml version="1.0" encoding="utf-8"?>
<topic id="bc7a69cf-35f2-413d-a041-de705543f23c" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    	<para>
    		Пример работы с <codeEntityReference>T:StockSharp.AlfaDirect.AlfaTrader</codeEntityReference> демонстрирует приложение SampleAlfa, 
    		показанное на рисунке ниже.
		</para>
		<para>
		  <mediaLink>
			  <image placement="center" xlink:href="AlfaConnectorTest" />
		  </mediaLink>
		</para>
	    <alert class="note">
		  <para>
		  	Исходный код данного примера доступен в дистрибутиве в каталоге <legacyItalic>Samples/AlfaDirect</legacyItalic>.
		  </para>
		</alert>
	    <alert class="caution">
		  <para>
		  	Проверьте, что терминал <token>alfa</token> настроен корректно для работы с <codeEntityReference>T:StockSharp.AlfaDirect.AlfaTrader</codeEntityReference>
		  	- см. <link xlink:href="dc7d8d3b-1d25-4f81-a043-dd4ee9f34147">Настройка терминала</link>.
		  </para>
		</alert>
    </introduction>
    
    <procedure>
    	<title>Пример работы с AlfaTrader</title>
		<steps class="ordered">
			<step>
				<content>
					<para>В самом начале необходимо создать экземпляр коннектора <codeEntityReference qualifyHint="false">T:StockSharp.AlfaDirect.AlfaTrader</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
							// создаем подключение и указываем логин и пароль
						   Trader = new AlfaTrader { LogLevel = LogLevels.Debug };
						   Trader.Login = TextBoxLogin.Text;
					       Trader.Password = PasswordBox.Password;
					       
					
							]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>Создаем обработчики событий <codeEntityReference>T:StockSharp.BusinessEntities.IConnector</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[

						// подписываемся на событие успешного соединения
						Trader.Connected += () =>
						{
							this.GuiAsync(() => ChangeConnectStatus(true));

							// запускаем подписку на новости
							Trader.RegisterNews();
						};

						// подписываемся на событие успешного отключения
						Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

						// подписываемся на событие разрыва соединения
						Trader.ConnectionError += error => this.GuiAsync(() =>
						{
							// заблокируем кнопку Экспорт (так как соединение было потеряно)
							ChangeConnectStatus(false);

							MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
						});

						// подписываемся на ошибку обработки данных (транзакций и маркет)
						Trader.Error += error =>
							this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

						// подписываемся на ошибку подписки маркет-данных
						Trader.MarketDataSubscriptionFailed += (security, type, error) =>
							this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(type, security)));

						Trader.NewSecurities += securities => _securitiesWindow.SecurityPicker.Securities.AddRange(securities);
						Trader.NewTrades += trades => _tradesWindow.TradeGrid.Trades.AddRange(trades);
						Trader.NewMyTrades += trades => _myTradesWindow.TradeGrid.Trades.AddRange(trades);
						Trader.NewOrders += orders => _ordersWindow.OrderGrid.Orders.AddRange(orders);
						Trader.NewStopOrders += orders => _stopOrdersWindow.OrderGrid.Orders.AddRange(orders);
						Trader.NewPortfolios += portfolios =>
						{
							portfolios.ForEach(Trader.RegisterPortfolio);
							_portfoliosWindow.PortfolioGrid.Portfolios.AddRange(portfolios);
						};
						Trader.NewPositions += positions => _portfoliosWindow.PortfolioGrid.Positions.AddRange(positions);

						// подписываемся на событие о неудачной регистрации заявок
						Trader.OrdersRegisterFailed += OrdersFailed;
						// подписываемся на событие о неудачном снятии заявок
						Trader.OrdersCancelFailed += OrdersFailed;

						// подписываемся на событие о неудачной регистрации стоп-заявок
						Trader.StopOrdersRegisterFailed += OrdersFailed;
						// подписываемся на событие о неудачном снятии стоп-заявок
						Trader.StopOrdersCancelFailed += OrdersFailed;

						// устанавливаем поставщик маркет-данных
						_securitiesWindow.SecurityPicker.MarketDataProvider = Trader;

						ShowSecurities.IsEnabled = ShowNews.IsEnabled =
						ShowMyTrades.IsEnabled = ShowOrders.IsEnabled = ShowStopOrders.IsEnabled =
						ShowPortfolios.IsEnabled = true;

						Trader.NewNews += news => _newsWindow.NewsPanel.NewsGrid.News.Add(news);
						
							]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>Выполняем подключение:</para>
            				<code language="C#">
            				<![CDATA[
							 Trader.Connect();
							]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>При успешном подключении можно ожидать появления событий:</para>
					<list class="bullet">
						<listItem>
							<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged</codeEntityReference> – 
								изменение инструмента (последней цены, цены спроса/предложения и т.д.) запрошенного 
								через <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference>.</para>
						</listItem>
						<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.MarketDepthsChanged</codeEntityReference> – 
								изменение стакана, запрошенного с помощью
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference>.</para>
						</listItem>
						<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrades</codeEntityReference> – 
								новые тики по подписанным с помощью 
								<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> инструментам.</para>
						</listItem>
						<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.PortfoliosChanged</codeEntityReference> – 
								изменение портфелей, запрошенное с помощью 
								<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference>.</para>
						</listItem>
					</list>
				</content>
			</step>
			<step>
				<content>
					<para>Для получения обновлений по выбранному инструменту и тиков необходимо воспользоваться методами 
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference> и 
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> соответственно:</para>
            			<code language="C#">
            				<![CDATA[
private void QuotesClick(object sender, RoutedEventArgs e)
{
  var security = SecurityPicker.SelectedSecurity;
  var trader = MainWindow.Instance.Trader;

  if (trader.RegisteredSecurities.Contains(security))
      trader.UnRegisterSecurity(security);
  else
      trader.RegisterSecurity(security);
}
							]]>
						</code>
					    <code language="C#">
            				<![CDATA[
private void TradesClick(object sender, RoutedEventArgs e)
{
  var security = SecurityPicker.SelectedSecurity;
  var trader = MainWindow.Instance.Trader;

  if (trader.RegisteredTrades.Contains(security))
      trader.UnRegisterTrades(security);
  else
      trader.RegisterTrades(security);
}
							]]>
						</code>

				</content>
			</step>
			<step>
			<content>
				<para>Для запроса обновлений по стаканам необходимо воспользоваться методом 
				<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference>:</para>
				    <code language="C#">
            			<![CDATA[
private void DepthClick(object sender, RoutedEventArgs e)
{
  var trader = MainWindow.Instance.Trader;

var window = _quotesWindows.SafeAdd(SecurityPicker.SelectedSecurity, security =>
 {
  // начинаем получать котировки стакана
  trader.RegisterMarketDepth(security);

  // создаем окно со стаканом
  var wnd = new QuotesWindow { Title = security.Id + " " + LocalizedStrings.MarketDepth };
  wnd.MakeHideable();
  return wnd;
 });

 if (window.Visibility == Visibility.Visible)
    window.Hide();
 else
    window.Show();

 if (!_initialized)
 {
   TraderOnMarketDepthsChanged(new[] { trader.GetMarketDepth(SecurityPicker.SelectedSecurity) });
   trader.MarketDepthsChanged += TraderOnMarketDepthsChanged;
   _initialized = true;
  }
}
						]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>Для регистрации заявок используется метод 
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
private void NewOrderClick(object sender, RoutedEventArgs e)
{
  var newOrder = new OrderWindow
  {
    Order = new Order { Security = SecurityPicker.SelectedSecurity },
    Connector = MainWindow.Instance.Trader,
  };

  if (newOrder.ShowModal(this))
      MainWindow.Instance.Trader.RegisterOrder(newOrder.Order);
}
							]]>
					</code>
				</content>
			</step>
			
			
		</steps>
	</procedure>
	

   <!-- <procedure>
      <title>Пример использования Альфа-Конектора</title>
      <steps class="ordered">
        <step>
          <content>
            <para>Для работы с <token>alfa</token> мы будем использовать три основных объекта:</para>

				  <list class="bullet">
						  <listItem>
							  <legacyBold>_trader</legacyBold> - объект для доступа к функциям терминала.
						  </listItem>
						  <listItem>
							  <legacyBold>_portfolio</legacyBold> - портфель. 
							  
						  </listItem>
						  <listItem>
							  <legacyBold>_security</legacyBold> - торгуемый инструмент.
						  </listItem>
				  </list>
			<alert class="note">
				<para>
					В <codeEntityReference>T:StockSharp.AlfaDirect.AlfaTrader</codeEntityReference> используется аккаунт в качестве портфеля, поэтому правильное
					значение поля <codeEntityReference>P:StockSharp.BusinessEntities.Portfolio.Name</codeEntityReference>, например, "41469", а не "41469-000".
				</para>
			</alert>
            <para>
            	Добавим их в качестве членов нашего класса формы:
            </para>
		  <code language="C#"><![CDATA[ITrader _trader;
Portfolio _portfolio;
Security _security;
]]></code>
			<para>
				Для поиска портфеля будем использовать поле <codeEntityReference>P:StockSharp.BusinessEntities.Portfolio.Name</codeEntityReference>, его значение можно указать на форме. В нашем случае это "41469".
			</para>
			<para>
				Для поиска инструмента будем использовать поле <codeEntityReference>P:StockSharp.BusinessEntities.Security.Id</codeEntityReference>, его значение можно указать на форме. В нашем случае это "SBER-6.11@FORTS".
			</para>
			</content>
        </step>

        <step>
          <content>
            <para>Далее необходимо создать объект <codeEntityReference>T:StockSharp.AlfaDirect.AlfaTrader</codeEntityReference>. 
            Для этого хорошо подходит функция TestFormLoad, вызываемая при загрузке окна приложения:
            </para>
		  <code language="C#">
	<![CDATA[try
{
	_trader = new AlfaTrader();
 _logManager.Sources.Add(_trader.To<BaseTrader>());
}
catch (Exception ex)
{
	this.AddErrorLog("Failed to create AlfaTrader: " + ex.Message);
	return;
}
]]></code>
	    <alert class="note">
		  <para>
				Данный пример использует интерфейс <codeEntityReference>T:StockSharp.Logging.ILogSource</codeEntityReference>, 
		  	описанный в разделе <link xlink:href="9619f1db-064f-421f-967e-4c15a5b0aa71">Отладка</link>.
		  </para>
		</alert>
          </content>
        </step>

        <step>
          <content>
            <para>Зарегистрируем обработчики сообщений от <codeEntityReference>T:StockSharp.AlfaDirect.AlfaTrader</codeEntityReference> 
			в этой же фунуции TestFormLoad:
            </para>
		  <code language="C#"><![CDATA[_trader.Connected += OnConnected; // событие подключения
_trader.Disconnected += OnDisconnected; // событие отключения
_trader.ConnectionError += OnConnectionError; // событие ошибки подключения
_trader.NewSecurities += OnNewSecurities; // событие появление новых инструментов
_trader.NewPortfolios += OnNewPortfolios; // событие появление новых портфелей
_trader.NewTrades += OnNewTrades; // событиe появление новых сделок по инструменту
_trader.MarketDepthsChanged += OnQuotesChanged; // событие изменения стакана 
_trader.SecuritiesChanged += OnSecuritiesChanged; // событие изменения инструмента (лучшая цена, минимум дня и т.д.)
_trader.PortfoliosChanged += PortfoliosChanged; // событие изменения портфеля
_trader.OrdersChanged += OrdersChanged; // событие изменения заявки
_trader.NewPositions += NewPositions; // событие о новой или ранее открытой позиции
_trader.PositionsChanged += PositionsChanged; // событие об изменении позиции
]]></code>
			<para>
				Основная часть обработчиков выше предназначена для логирования полученной информации.
			</para>
			</content>
        </step>
        <step>
          <content>
            <para>Далее изучим вопрос подключения к терминалу <token>alfa</token>. Для этого на форме расположены три кнопки: Connect, Disconnect, IsConnected. Обработчики этих кнопок содержат следующий код:
            </para>
		  <code language="C#"><![CDATA[private void ButtonConnectClick(object sender, EventArgs e)
{
 this.AddInfoLog("ITrader::Connect()");
 var alfaTrader = _trader.To<AlfaTrader>();	    
 if(checkBoxAutoLogin.Checked)
 {
   alfaTrader.Login = textBoxLogin.Text;
   alfaTrader.Password = textBoxPassword.Text;
 }
 _trader.Connect();
}

private void ButtonDisconnectClick(object sender, EventArgs e)
{
	this.AddInfoLog("ITrader::Disconnect()");
	_trader.Disconnect();
}

private void ButtonIsConnectedClick(object sender, EventArgs e)
{
	this.AddInfoLog("ITrader::IsConnected: " + _trader.IsConnected);
}
]]></code>
			<para>
				При нажатии на кнопку Connect автоматически запустится терминал <token>alfa</token>. После входа в терминал будет получено событие успешного подключения
				<codeEntityReference>E:StockSharp.BusinessEntities.IConnector.Connected</codeEntityReference>.
				Так как у нас подключен обработчик на это событие, то в окне Output мы увидим следующие сообщения:
			</para>
		  <code language="Output"><![CDATA[09:17:26 | Debug | TestForm   | ITrader::Connect()
09:17:26 | Debug | AlfaTrader | OnConnect()
09:17:26 | Info  | AlfaTrader | AlfaDirect v.3.5.2.6
09:17:26 | Debug | TestForm   | OnConnected()
]]></code>
			</content>
        </step>
      
	    <step>
          <content>
            <para>
            	Далее необходимо запустить экспорт данных. Для управления экспортом на форме 
            	расположены кнопки "Start Export" и "Stop Export". Обработчики этих кнопок содержат 
            	следующий код:
            </para>
		    <code language="C#"><![CDATA[private void ButtonStartExportClick(object sender, EventArgs e)
{
	this.AddInfoLog("ITrader::StartExport()");
	_trader.StartExport();
}

private void ButtonStopExportClick(object sender, EventArgs e)
{
	this.AddInfoLog("ITrader::StopExport()");
	_trader.StopExport();
}
]]></code>
		<para>
		После запуска экспорта формой будут получены события <codeEntityReference>E:StockSharp.BusinessEntities.IConnector.NewPortfolios</codeEntityReference> и <codeEntityReference>E:StockSharp.BusinessEntities.IConnector.NewSecurities</codeEntityReference>. 
		Мы будем использовать обработчики этих событий для инициализации портфеля и иснтрумента (объекты _portfolio и _security нашего класса). Рассмотрим их код:
		</para>
		<code language="C#"><![CDATA[void OnNewPortfolios(IEnumerable<Portfolio> portfolios)
{
	this.AddInfoLog("OnNewPortfolios()");

	foreach (var port in portfolios) // проход через все полученные портфели
	{
		this.AddInfoLog("New portfolio: " + port.Name);
    this.AddInfoLog(PrintUtils.Log(port));

		if (_portfolio == null)
		{
			_portfolio = port; // для простоты берем первый полученный портфель
		}
	}
}

void OnNewSecurities(IEnumerable<Security> securities)
{
	this.AddInfoLog("OnNewSecurities()");

	foreach (var sec in securities) // проход через все полученные инструменты
	{
		PrintUtils.Log(sec);

		if (sec.Id == textBoxSecurity.Text) // поиск нужного инструмента через id (SBER-6.11@FORTS)
		{
			this.AddInfoLog("Found " + sec.Code);
			_security = sec;
		}
	}
}
]]></code>
			</content>
        </step>
	  
	    <step>
          <content>
			<para>
			После того, как мы подключились и запустили экспорт, можно посмотреть информацию о наши 
			объектах _portfolio и _security. Для этого на форме есть группа кнопок "Debug Info".
			Обработчики этих кнопок печатают базовую информацию о наших объектах, например:
			</para>
		    <code language="Output"><![CDATA[09:35:08 | Debug | PrintUtils | ....... 41469 .......
BeginAmount: 15338,8 RUB
CurrentAmount: 14853,91 RUB
................................

09:38:04 | Debug | PrintUtils | ....... Сбербанк 14.06.11 .......
Id: SBER-6.11@FORTS
ShortName: Сбербанк 14.06.11
ExpiryDate: 14.06.2011 0:00:00
State: Trading
Code: SBER-6.11
Exchange: РТС
MarginBuy: 1132
MarginSell: 1132
MinStepSize: 1
MinStepPrice: 1
Type: Future
................................
]]></code>
		  </content>
	  </step>

	  <step>
          <content>
			<para>
				Если мы хотим получать обновления об изменениях баланса необходимо зарегистрировать 
				портфель (кнопки Register Portfolio и UnRegister Portfolio). Код обработчика кнопки 
				Start Portfolio:
			</para>
			<code language="C#"><![CDATA[private void ButtonRegisterPortfolioClick(object sender, EventArgs e)
{
			if (_portfolio == null)
			{
				this.AddErrorLog("Portfolio is not received yet, failed to register");
			}
			else
			{
				this.AddInfoLog("ITrader::RegisterPortfolio");
				_trader.RegisterPortfolio(_portfolio);
			}
}
]]></code>
		<para>
			После регистрации портфеля мы начнем получать события 
			<codeEntityReference>E:StockSharp.BusinessEntities.IConnector.PortfoliosChanged</codeEntityReference>:
		</para>
		<code language="Output"><![CDATA[10:02:25 | Debug | TestForm   | PortfoliosChanged()
10:02:25 | Debug | PrintUtils | ....... 41469 .......
BeginAmount: xxxxx,x RUB
CurrentAmount: yyyyy,y RUB
................................
]]></code>
		  </content>
	  </step>
	  
	  <step>
          <content>
			<para>
				Для получения сделок по инструменту (ленте) предусмотрены кнопки Register Trades и 
				UnRegister Trades. Код обработчика кнопки Register Trades:
			</para>
			<code language="C#"><![CDATA[private void ButtonRegisterTradesClick(object sender, EventArgs e)
{
			this.AddInfoLog("ITrader::RegisterTrades");

			if (_security == null)
			{
				this.AddErrorLog(textBoxSecurity.Text + " is not received yet");
			}
			else
			{
				_trader.RegisterTrades(_security);
			}
}
]]></code>
		<para>
			После регистрации на получение сделок мы начнем получать события 
			<codeEntityReference>E:StockSharp.BusinessEntities.IConnector.NewTrades</codeEntityReference>:
		</para>
		<code language="Output"><![CDATA[10:11:14 | Debug | AlfaTrader | RegisterTrades:SBER-6.11@FORTS
10:11:14 | Debug | TestForm   | OnNewTrades()
10:11:14 | Debug | PrintUtils | Trade: 322474513, 23.05.2011 11:11:13, Sell, SBER-6.11@FORTS, 9309, 17
10:11:14 | Debug | PrintUtils | Trade: 322474524, 23.05.2011 11:11:13, Sell, SBER-6.11@FORTS, 9309, 10
10:11:14 | Debug | PrintUtils | Trade: 322474520, 23.05.2011 11:11:13, Sell, SBER-6.11@FORTS, 9309, 2
10:11:14 | Debug | PrintUtils | Trade: 322474522, 23.05.2011 11:11:13, Sell, SBER-6.11@FORTS, 9309, 10
]]></code>
		  </content>
	  </step>
	  
	  	  <step>
          <content>
			<para>
				Для получения стаканов по инструменту предусмотрены кнопки Register Quotes и UnRegister 
				Quotes. Код обработчика кнопки Register Quotes:
			</para>
			<code language="C#"><![CDATA[private void ButtonRegisterQuotesClick(object sender, EventArgs e)
{
			this.AddInfoLog("ITrader::RegisterQuotes");

			if (_security == null)
			{
				this.AddInfoLog(textBoxSecurity.Text +  " is not received yet");
			}
			else
			{
				_trader.RegisterMarketDepth(_security);
			}
}
]]></code>
		<para>
			После регистрации на получение стаканов мы начнем получать события 
			<codeEntityReference qualifyHint="false">E:StockSharp.BusinessEntities.IConnector.MarketDepthsChanged</codeEntityReference>:
		</para>
		<code language="Output"><![CDATA[10:13:44 | Debug | TestForm   | ITrader::RegisterQuotes
10:13:44 | Debug | AlfaTrader | RegisterQuotes:SBER-6.11@FORTS
10:13:44 | Debug | TestForm   | OnQuotesChanged
10:13:44 | Debug |            | SBER-6.11, Бид 9327 132, Оффер 9328 195
10:13:45 | Debug | TestForm   | OnQuotesChanged
10:13:45 | Debug |            | SBER-6.11, Бид 9327 131, Оффер 9328 199
]]></code>
		  </content>
	  </step>
	  
	  <step>
          <content>
			<para>
				В группе кнопок Properties расположены кнопки для получения списка всех инструментов 
				(кнопка Securities), списка портфелей (Portfolios), списка собственных сделок (MyTrades), 
				биржевого времени (Market Time), текущих позиций (Positions), список заявок (Orders). 
				Рассмотрим кнопку получения биржевого времени:
			</para>
				  <code language="C#"><![CDATA[private void ButtonMarketTimeClick(object sender, EventArgs e)
{
	this.AddInfoLog("ITrader::MarketTime: " + _trader.MarketTime);
}
}]]></code>

		<para>
			Пример результата в окне Output:
		</para>
				  <code language="Output">10:22:34 | Debug | TestForm   | ITrader::MarketTime: 23.05.2011 11:22:32</code>
		  </content>
	  </step>
	  
	  	  <step>
          <content>
			<para>
				Для регистрации заявок предусмотрена группа кнопок Orders. Рассмотрим пример создания лимитной заявки на покупку:
			</para>
<code language="C#"><![CDATA[private void ButtonBuyLimitClick(object sender, EventArgs e)
{
			this.AddInfoLog("Buy Limit");

			_order = new Order
			{
				Type = OrderTypes.Limit,
				Portfolio = _portfolio,
				Security = _security,
				Price = Decimal.Parse(textBoxBuyLimitPrice.Text),
				Volume = 1,
				Direction = OrderDirections.Buy
			};

			try
			{
				_trader.RegisterOrder(_order);
			}
			catch (Exception ex)
			{
				this.AddErrorLog("Failed to register order: " + ex.Message);
			}
}
}]]></code>
		<para>
			По мере изменения состояния заявки будут приходить события <codeEntityReference>E:StockSharp.BusinessEntities.IConnector.OrdersChanged</codeEntityReference>:
		</para>
		<code language="Output"><![CDATA[
10:37:28 | Debug | TestForm   | OrdersChanged()
10:37:28 | Debug | PrintUtils | ........... order #69999863 ...........
Transac id: 36665039
Portfolio: 41469
Direction: Buy
Price: 9800
Volume: 1
Time: 23.05.2011 11:37:26
Security: SBER-6.11
State: Done
CancelTime: 23.05.2011 11:37:27
........... end order ...........
]]></code>
		<alert class="note">
		  <para>
		  	Работа со стоп заявками описана в разделе <link xlink:href="c0f3f55c-3832-46ed-90da-30129019c8f3">Стоп-заявки</link>.
		  </para>
		</alert>
		</content>
	  </step>
	  
      </steps>
    </procedure> -->

    <relatedTopics>
      <link xlink:href="dc7d8d3b-1d25-4f81-a043-dd4ee9f34147">Настройка терминала</link>
      <link xlink:href="c0f3f55c-3832-46ed-90da-30129019c8f3">Стоп-заявки</link>
      <link xlink:href="9619f1db-064f-421f-967e-4c15a5b0aa71">Отладка</link>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>