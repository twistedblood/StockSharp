<?xml version="1.0" encoding="utf-8"?>
<topic id="eca7454c-0532-4aaf-92bf-7a3d0cba635b" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>
		Класс <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference> реализует интерфейс <codeEntityReference>T:StockSharp.Logging.ILogSource</codeEntityReference>.
		Поэтому стратегии можно передавать в <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Sources</codeEntityReference>,
		и все ее сообщения будут автоматически попадать в <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Listeners</codeEntityReference>.
		
		
		
		<!--можно использовать метод <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.AddLog(StockSharp.Algo.Strategies.ErrorStates,System.String,System.Object[])</codeEntityReference>.
		Передавая в него отладочную информацию или данные о ведении роботом торговли, <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference>
		автоматически перебрасывает их через событие <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Strategies.Strategy.Log</codeEntityReference>.
		Это сделано для того, чтобы внешний код (например, главное окно робота, где осуществляется запуск и остановка стратегий) мог
		обработать полученную информацию. Например, отобразить ее на экран пользователю.
		
		Для логирования сообщений предоставляет вспомогательный класс <codeEntityReference>T:StockSharp.Logging.StrategyLogManager</codeEntityReference>.
		При добавлении стратегии в коллекцию <codeEntityReference qualifyHint="true">P:StockSharp.Logging.StrategyLogManager.Strategies</codeEntityReference>
		<codeEntityReference>T:StockSharp.Logging.StrategyLogManager</codeEntityReference> автоматически подписывается на событие
		<codeEntityReference qualifyHint="true">E:StockSharp.Algo.Strategies.Strategy.Log</codeEntityReference>. После этого весь вывод сообщений
		будет переадресовываться в коллекцию <codeEntityReference qualifyHint="true">P:StockSharp.Logging.StrategyLogManager.Listeners</codeEntityReference>.
		По-умолчанию данная коллекция пустая. Чтобы сообщения из стратегий начали попадать, к примеру, в файл, нужно добавить соответствующий
		<codeEntityReference>T:StockSharp.Logging.StrategyLogListener</codeEntityReference>.-->
	</para>
    </introduction>
    
    <prerequisites>
		<content>
			<para>
				<link xlink:href="2c3a0d3a-6e89-42a1-a158-9a258e0a62e1">Торговые стратегии</link>
			</para>
		</content>
	</prerequisites>
    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->
    <!-- One or more procedure or section with procedure -->
    <procedure>
			<title>Логирование в тестовый файл</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							В самом начале необходимо создать менеджер логирования:
						</para>
						<code language="C#">var logManager = new LogManager();</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Затем необходимо создать файловый логгер, передав в него имя файла, и добавить его в <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Listeners</codeEntityReference>:
						</para>
						<code language="C#">var fileListener = new FileLogListener("{0}_{1:00}_{2:00}.txt".Put(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day));
logManager.Listeners.Add(fileListener);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Для логирования сообщений необходимо добавить стратегию в
							<codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Sources</codeEntityReference>:
						</para>
						<code language="C#">logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							После добавления стратегии в менеджер логирования все ее сообщения будут записаться в файл.
						</para>
					</content>
				</step>
			</steps>
		</procedure>

		<procedure>
			<title>Проигрывание звука</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							Создание логгера и передача в него имени звукового файла:
						</para>
						<code language="C#">var soundListener = new SoundLogListener("error.mp3");
						
logManager.Listeners.Add(soundListener);
logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Установка фильтра на проигрывание звука только при сообщениях типа
							<codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Error</codeEntityReference>:
						</para>
						<code language="C#">soundListener.Filters.Add(msg => msg.Level == LogLevels.Error);</code>
					</content>
				</step>
			</steps>
		</procedure>

		<procedure>
			<title>Отсылка Email</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							Создание логгера и передача в него параметров отсылаемых писем:
						</para>
						<code language="C#">var emailListener = new EmailLogListener("from@stocksharp.com", "to@stocksharp.com");

logManager.Listeners.Add(emailListener);
logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Установка фильтра на отсылку сообщений типов 
							<codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Error</codeEntityReference>
							и <codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Warning</codeEntityReference>:
						</para>
						<code language="C#">emailListener.Filters.Add(msg => msg.Level == LogLevels.Error);
emailListener.Filters.Add(msg => msg.Level == LogLevels.Warning);</code>
					</content>
				</step>
			</steps>
		</procedure>

	<!--	<procedure>
			<title>Передача Sms через Google Calendar</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							Перед использованием <codeEntityReference>T:StockSharp.Logging.SmsLogListener</codeEntityReference>
							необходимо настроить Google Calendar, указав в нем номер телефона, и выключив уведомление через SMS. Подробнее,
							<token>calendar</token>.
						</para>
					</content>
				</step>
				<step>
					<content>
						<para>
							Создание логгера и передача в него логина и пароля от Google сервисов:
						</para>
						<code language="C#">var smsListener = new SmsLogListener("имя@gmail.com", "пароль");

logManager.Listeners.Add(smsListener);
logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Установка фильтра на отсылку сообщений типа <codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Error</codeEntityReference>:
						</para>
						<code language="C#">smsListener.Filters.Add(msg => msg.Level == LogLevels.Error);</code>
					</content>
				</step>
			</steps>
		</procedure> -->

		<procedure>
			<title>Логирование в LogWindow</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							Создание логгер <codeEntityReference>T:StockSharp.Xaml.GuiLogListener</codeEntityReference>:
						</para>
						<code language="C#">// каждая стратегия будет иметь свое собственное окно
var guiListener = new GuiLogListener();

logManager.Listeners.Add(guiListener);
logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Вот как выглядит окно логов при работе стратегии котирования заявок (<link xlink:href="24250c24-029c-4dbc-bc8b-4afde645e483"/>):
						</para>
						<mediaLink>
							<image placement="center" xlink:href="strategylogging" />
						</mediaLink>
					</content>
				</step>
			</steps>
		</procedure>
    <!-- Optional next steps info
    <nextSteps>
      <content><para>Next steps info goes here</para></content>
    </nextSteps>
    -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>