<?xml version="1.0" encoding="utf-8"?>
<topic id="9d3b0442-0633-4ba5-97e1-22829adcd025" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
      <para>
		  <codeEntityReference>T:StockSharp.SmartCom.SmartTrader</codeEntityReference> может предоставлять исторические данные за предыдущие торговые сессии.
		  Такие данные поставляются только свечками вида <codeEntityReference>T:StockSharp.Algo.Candles.TimeFrameCandle</codeEntityReference>,
		  и со строго ограниченными тайм-фреймами <codeEntityReference>T:StockSharp.SmartCom.SmartComTimeFrames</codeEntityReference>.
	  </para>
    </introduction>

    <prerequisites>
      <content>
        <para>
			<link xlink:href="cd52cfcf-938c-4fce-9a56-4e9a001f0792">Свечки</link>
		</para>
      </content>
    </prerequisites>
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Пример работы с историческими свечками</title>

      <steps class="ordered">
		  <step>
			  <content>
				  <para>
					  В самом начале необходимо добавить <codeEntityReference>T:StockSharp.SmartCom.SmartTrader</codeEntityReference> 
					  в <codeEntityReference>T:StockSharp.Algo.Candles.CandleManager</codeEntityReference>
					  как источник свечек:
				  </para>
				  <code language="C#"><![CDATA[// создаем шлюз
_trader = new SmartTrader(this.Login.Text, this.Password.Password);

_candleManager = new CandleManager(_trader);]]></code>


				<alert class="note">
  					<para>
  						Исторические свечки можно получить напрямую из <codeEntityReference>T:StockSharp.SmartCom.SmartTrader</codeEntityReference>, подписавшись на событие
  						<codeEntityReference qualifyHint="true">E:StockSharp.SmartCom.SmartTrader.NewCandles</codeEntityReference>. Для начала получения свечек необходимо вызвать метод
  						<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.SmartCom.SmartTrader.RequestCandles(StockSharp.BusinessEntities.Security,StockSharp.SmartCom.SmartComTimeFrames,Ecng.ComponentModel.Range{System.DateTimeOffset})</codeEntityReference> или
  						<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.SmartCom.SmartTrader.RequestCandles(StockSharp.BusinessEntities.Security,StockSharp.SmartCom.SmartComTimeFrames,System.DateTimeOffset,System.Int64,StockSharp.SmartCom.SmartComHistoryDirections)</codeEntityReference>.
  					</para>
				</alert>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  В итоге пример должен выглядеть следующем образом:
				  </para>
				  <mediaLink>
					  <image placement="center" xlink:href="samplesmarthistory" />
				  </mediaLink>
				  <alert class="note">
					  <para>Исходные коды примера лежат в папке SampleSmartCandles, где показана работа как со свечками реального времени, так и с историческими.</para>
				  </alert>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Если в программе требуется получать свечки постоянно (например, за текущую торговую сессию по мере появления новых сформированных
					  свечек), то для этого можно использовать метод 
					  <codeEntityReference qualifyHint="true">M:StockSharp.SmartCom.SmartTrader.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)</codeEntityReference>.
					  После этого, событие <codeEntityReference qualifyHint="true">E:StockSharp.SmartCom.SmartTrader.NewCandles</codeEntityReference> будет
					  вызываться постоянно, как только сформируется очередная свечка.
				  </para>
				  
				  <!-- RequestCandles(StockSharp.BusinessEntities.Security security, StockSharp.SmartCom.SmartComTimeFrames timeFrame, Ecng.ComponentModel.Range<DateTimeOffset> range)

				   RequestCandles(StockSharp.BusinessEntities.Security security, StockSharp.SmartCom.SmartComTimeFrames timeFrame, System.DateTimeOffset from, long count, StockSharp.SmartCom.SmartComHistoryDirections direction)-->

				  
			  </content>
		  </step>
      </steps>
    </procedure>

	  <!--section>
		  <title>Тиковые данные</title>

		  <content>
			  <para>
				  Дополнительно, <codeEntityReference>T:StockSharp.Smart.SmartTrader</codeEntityReference> умеет возвращать тиковые сделки с начала торговой сессии.
				  Для этого используется тот же самый метод <codeEntityReference qualifyHint="true">M:StockSharp.Smart.SmartTrader.RegisterHistoryData(StockSharp.BusinessEntities.Security,StockSharp.Smart.SmartTimeFrames,Ecng.ComponentModel.Range{System.DateTime})</codeEntityReference>,
				  но в него уже передается тайм-фрейм <codeEntityReference qualifyHint="true">P:StockSharp.Smart.SmartTimeFrames.Tick</codeEntityReference>. Сама
				  тиковая сделка приходит через событие <codeEntityReference qualifyHint="true">E:StockSharp.Smart.SmartTrader.NewHistoryTrade</codeEntityReference>.
			  </para>
		  </content>
	  </section-->

  </developerWalkthroughDocument>
</topic>