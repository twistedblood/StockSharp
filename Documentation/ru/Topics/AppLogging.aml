<?xml version="1.0" encoding="utf-8"?>
<topic id="f9e75266-8f0e-4983-8319-7a41d53e0f39" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
    <para>
		В предыдущих топиках источниками логов выступали объекты встроенных в <token>stocksharp</token> классов. В <token>stocksharp</token> предусмотрены возможности для
		случаев, когда источником логов должен служить Ваш собственый класс или же источник не должен быть связан с определенным классом, а обслуживать всё приложение.
		Для первого случая необходимо реализовать в Вашем классе интерфейс <codeEntityReference>T:StockSharp.Logging.ILogSource</codeEntityReference> или наследовать его
		от <codeEntityReference>T:StockSharp.Logging.BaseLogReceiver</codeEntityReference>. Во второй ситуации можно использовать источник 
		<codeEntityReference>T:StockSharp.Logging.TraceSource</codeEntityReference>, использующий систему трассировки .NET.
		Как это сделать показано в примере <legacyItalic>Samples/Common/SampleLogging</legacyItalic>.
	</para>
	</introduction>
	
	 <procedure>
      <title>Пример SampleLogging</title>
	  <steps class="ordered">
        <step>
          <content>
          <para>Создаем пользовательский класс, наследующий от <codeEntityReference>T:StockSharp.Logging.BaseLogReceiver</codeEntityReference>.</para>
			<code language="C#">
private class TestSource : BaseLogReceiver
{
}
</code>
          </content>
        </step>
		<step>
			<content>
				<para>Создаем <codeEntityReference>T:StockSharp.Logging.LogManager</codeEntityReference> и декларируем переменную пользовательского класса.</para>
				<code language="C#">
private readonly LogManager _logManager = new LogManager();
private readonly TestSource _testSource;
				</code>
			</content>
		</step>
		<step>
			<content>
				<para>Добавляем источники логов.</para>
				<code language="C#">
// пользовательский класс в качестве источника
_logManager.Sources.Add(_testSource = new TestSource());

// система трассировки .NET в качестве источника
_logManager.Sources.Add(new StockSharp.Logging.TraceSource());
				</code>
			</content>
		</step>
		<step>
			<content>
			<para>Добавляем "слушателей" логов.</para>
				<code language="C#">
// выводим логи в окно Monitor
_logManager.Listeners.Add(new GuiLogListener(Monitor));

// выводим логи в файл
_logManager.Listeners.Add(new FileLogListener
{
	FileName = "logs",
});
				</code>
			</content>
		</step>
		<step>
			<content>
			<para>Добавляем сообщения логирования пользовательского класса. Уровень логирования выбирается случайным образом.</para>
			<code language="C#">
			<![CDATA[
var level = RandomGen.GetEnum<LogLevels>();

switch (level)
{
	case LogLevels.Inherit:
	case LogLevels.Debug:
	case LogLevels.Info:
	case LogLevels.Off:
		_testSource.AddInfoLog("{0} (source)!!!".Put(level));
		break;
	case LogLevels.Warning:
		_testSource.AddWarningLog("Warning (source)!!!");
		break;
	case LogLevels.Error:
		_testSource.AddErrorLog("Error (source)!!!");
		break;
	default:
		throw new ArgumentOutOfRangeException();
}
]]>
				</code> 
			</content>
		</step>
		<step>
			<content>
			<para>Добавляем сообщения трассировки.</para>
				<code language="C#">
				<![CDATA[
var level = RandomGen.GetEnum<LogLevels>();

switch (level)
{
	case LogLevels.Inherit:
	case LogLevels.Debug:
	case LogLevels.Info:
	case LogLevels.Off:
		Trace.TraceInformation("{0} (trace)!!!".Put(level));
		break;
	case LogLevels.Warning:
		Trace.TraceWarning("Warning (trace)!!!");
		break;
	case LogLevels.Error:
		Trace.TraceError("Error (trace)!!!");
		break;
	default:
		throw new ArgumentOutOfRangeException();
}
]]>
				</code>
			</content>
		</step>
		<step>
			<content>
			<para>Результат работы примера.</para>
			<mediaLink><image placement="center" xlink:href="sample_logging" /></mediaLink>
			</content>
		</step>

      </steps>
    </procedure>
	
	
  </developerConceptualDocument>
</topic>