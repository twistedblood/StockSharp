<?xml version="1.0" encoding="utf-8"?>
<topic id="ec4c3abe-3779-4a5f-899c-697b049254d4" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>
      	Для того, чтобы создать свой собственный индикатор, необходимо реализовать интерфейс <codeEntityReference>T:StockSharp.Algo.Indicators.IIndicator</codeEntityReference>.
      	В качестве примера можно взять исходные коды других индикаторов, которые находятся в репозитории <token>stocksharpgithub</token>. Вот как выглядит код
      	реализации индикатора простой скользящей средней <codeEntityReference>T:StockSharp.Algo.Indicators.SimpleMovingAverage</codeEntityReference>:
      </para>
      <code language="C#"><![CDATA[/// <summary>
/// Простая скользящая средняя.
/// </summary>
[DisplayName("SMA")]
[Description("Простая скользящая средняя.")]
public class SimpleMovingAverage : LengthIndicator<decimal>
{
	/// <summary>
	/// Создать <see cref="SimpleMovingAverage"/>.
	/// </summary>
	public SimpleMovingAverage()
		: base(typeof(decimal))
	{
	}

	/// <summary>
	/// Обработать входное значение.
	/// </summary>
	/// <param name="input">Входное значение.</param>
	/// <returns>Результирующее значение.</returns>
	public override decimal OnProcess(IIndicatorValue input)
	{
		var lastValue = LastValue;
		var newValue = input.GetValue<decimal>();

		// добавляем новое начало
		lastValue += newValue / Length;

		// если буффер стал достаточно большим (стал больше длины)
		if (IsFormed)
		{
			// удаляем хвостовое значение
			lastValue -= Buffer[0] / Length;
			Buffer.RemoveAt(0);
		}

		Buffer.Add(newValue);
		return lastValue;
	}
}]]></code>
		<para>
			<codeEntityReference>T:StockSharp.Algo.Indicators.SimpleMovingAverage</codeEntityReference> наследуется от класса
			<codeEntityReference>T:StockSharp.Algo.Indicators.LengthIndicator`1</codeEntityReference>, от которого необходимо наследовать все индикаторы,
			имеющие в качестве параметра длину периода.
		</para>
		<para>
			Некоторые индикаторы являются составными, и используют в своих рассчетах другие индикаторы. Поэтому индикаторы можно переиспользовать друг
			из друга, как показано в качестве примера реализация индикатора волатильности Чайкина <codeEntityReference>T:StockSharp.Algo.Indicators.ChaikinVolatility</codeEntityReference>:
		</para>
		<code language="C#"><![CDATA[/// <summary>
/// Волатильность Чайкина.
/// </summary>
/// <remarks>
/// http://www2.wealth-lab.com/WL5Wiki/Volatility.ashx
/// http://www.incrediblecharts.com/indicators/chaikin_volatility.php
/// </remarks>
[DisplayName("Волатильность")]
[Description("Волатильность Чайкина.")]
public class ChaikinVolatility : BaseIndicator<IIndicatorValue>
{
	/// <summary>
	/// Создать <see cref="ChaikinVolatility"/>.
	/// </summary>
	public ChaikinVolatility()
	{
		Ema = new ExponentialMovingAverage();
		Roc = new RateOfChange();
	}

	/// <summary>
	/// Скользящая средняя.
	/// </summary>
	[ExpandableObject]
	[DisplayName("MA")]
	[Description("Скользящая средняя.")]
	[Category("Основное")]
	public ExponentialMovingAverage Ema { get; private set; }

	/// <summary>
	/// Скорость изменения.
	/// </summary>
	[ExpandableObject]
	[DisplayName("ROC")]
	[Description("Скорость изменения.")]
	[Category("Основное")]
	public RateOfChange Roc { get; private set; }

	/// <summary>
	/// Сформирован ли индикатор.
	/// </summary>
	public override bool IsFormed
	{
		get { return Roc.IsFormed; }
	}

	/// <summary>
	/// Обработать входное значение.
	/// </summary>
	/// <param name="input">Входное значение.</param>
	/// <returns>Результирующее значение.</returns>
	public override IIndicatorValue OnProcess(IIndicatorValue input)
	{
		var candle = input.GetValue<Candle>();
		return Roc.Process(Ema.Process(input.SetValue(candle.HighPrice - candle.LowPrice)));
	}
}]]></code>
		<para>
			Последний вид индикаторов - это те, которые не просто состоят из других индикаторов, но так же графически отображаются несколькими состояниями
			одновременно (несколькими линиями). Например, <codeEntityReference>T:StockSharp.Algo.Indicators.AverageDirectionalIndex</codeEntityReference>:
		</para>
		<code language="C#"><![CDATA[/// <summary>
/// Индекс среднего направления движения Welles Wilder.
/// </summary>
[DisplayName("ADX")]
[Description("Индекс среднего направления движения Welles Wilder.")]
public class AverageDirectionalIndex : BaseComplexIndicator
{
	/// <summary>
	/// Создать <see cref="AverageDirectionalIndex"/>.
	/// </summary>
	public AverageDirectionalIndex()
		: this(new DirectionalIndex { Length = 14 }, new WilderMovingAverage { Length = 14 })
	{
	}

	/// <summary>
	/// Создать <see cref="AverageDirectionalIndex"/>.
	/// </summary>
	/// <param name="dx">Индекса направленного движения Welles Wilder.</param>
	/// <param name="movingAverage">Скользящая средняя.</param>
	public AverageDirectionalIndex(DirectionalIndex dx, LengthIndicator<decimal> movingAverage)
	{
		if (dx == null)
			throw new ArgumentNullException("dx");

		if (movingAverage == null)
			throw new ArgumentNullException("movingAverage");

		InnerIndicators.Add(Dx = dx);
		InnerIndicators.Add(MovingAverage = movingAverage);
		Mode = ComplexIndicatorModes.Sequence;
	}

	/// <summary>
	/// Индекса направленного движения Welles Wilder.
	/// </summary>
	[Browsable(false)]
	public DirectionalIndex Dx { get; private set; }

	/// <summary>
	/// Скользящая средняя.
	/// </summary>
	[Browsable(false)]
	public LengthIndicator<decimal> MovingAverage { get; private set; }

	/// <summary>
	/// Длина периода.
	/// </summary>
	[DisplayName("Период")]
	[Description("Период индикатора.")]
	[Category("Основные")]
	public virtual int Length
	{
		get { return MovingAverage.Length; }
		set
		{
			MovingAverage.Length = Dx.Length = value;
			Reset();
		}
	}
}]]></code>
		<para>
			Такие индикаторы должны наследоваться от класса <codeEntityReference>T:StockSharp.Algo.Indicators.BaseComplexIndicator</codeEntityReference>,
			и передавать в <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Indicators.BaseComplexIndicator.InnerIndicators</codeEntityReference>
			составные части индикатора. <codeEntityReference>T:StockSharp.Algo.Indicators.BaseComplexIndicator</codeEntityReference> будет обрабатывать
			данные части один за другим. Если <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Indicators.BaseComplexIndicator.Mode</codeEntityReference>
			установлено в <codeEntityReference qualifyHint="true">F:StockSharp.Algo.Indicators.ComplexIndicatorModes.Sequence</codeEntityReference>,
			то результирующее значение первого индикатора будет передано в качестве входного значения второму, и так далее до конца. Если же установлено
			значение <codeEntityReference qualifyHint="true">F:StockSharp.Algo.Indicators.ComplexIndicatorModes.Parallel</codeEntityReference>, то результаты
			вложенных индикаторов игнорируются.
		</para>
    </introduction>
    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->
    <!-- One or more procedure or section with procedure -->
    <!--procedure>
      <title>Procedure title</title>
      <steps class="ordered">
        <step>
          <content>
            <para>First step</para>
          </content>
        </step>
        <step>
          <content>
            <para>Second step</para>
          </content>
        </step>
      </steps>
      <conclusion>Optional conclusion</conclusion>
    </procedure>

    <section address="Section1">
      <title>Optional section title</title>
      <content>
        <procedure>
          <title>Procedure #2</title>
          <steps class="ordered">
            <step>
              <content>
                <para>First step</para>
              </content>
            </step>
            <step>
              <content>
                <para>Second step</para>
              </content>
            </step>
          </steps>
          <conclusion>Optional conclusion</conclusion>
        </procedure>
      </content>
    </section-->
    <!-- Optional next steps info
    <nextSteps>
      <content><para>Next steps info goes here</para></content>
    </nextSteps>
    -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>