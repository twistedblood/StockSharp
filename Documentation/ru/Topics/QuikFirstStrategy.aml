<?xml version="1.0" encoding="utf-8"?>
<topic id="b6fea084-f43c-4eb7-ab63-ad3031d748a5" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			Смысл робота-примера в следующем: программа находит бумагу <legacyItalic>Лукойл</legacyItalic>, запоминает первоначальное значение середины
			спреда равное <math>(bid + ask) / 2</math>. Далее, как только значение спреда отклонится на <math>0.1%</math>, то выставляется заявка на покупку
			объемом 1 и ценой текущего спреда. Далее, если произойдет сделка по выставленной заявке, то программа выведет информацию по этой сделке.
		</para>
		<alert class="caution">
			<para>
				Библиотека TRANS2QUIK.dll программы <token>quik</token> имеет ограничение в разрядности - написана под 32-х разрядные платформы. Поэтому, при
				компилировании программы необходимо явно указывать разрядность:
			</para>
			<para>
				<mediaLink>
					<image placement="center" xlink:href="compile" />
				</mediaLink>
			</para>
			<para>
				Это позволит запускать торговых роботов под <token>quik</token> на 64-х разрядных операционных системах.
			</para>
		</alert>
		<alert class="note">
			<para>Исходные коды примера лежат в дистрибутиве в папке <legacyItalic>Samples\Quik\DDE\SampleConsole</legacyItalic>.</para>
		</alert>
	</introduction>
 
    <procedure>
      <title>Необходимые действия:</title>

      <steps class="ordered">
		  <step>
			  <content>
				  <para>В самом начале необходимо создать шлюз к торговой системе <token>quik</token>, используя класс <codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference>:</para>
				  <code language="C#">
					// создаем шлюз к Quik-у
					var trader = new QuikTrader(@"Ваш путь к Квик директории") { IsDde = true } ;</code>
			  </content>
		  </step>
		  <step>
		  	<content>
		  	<para>Затем создадим список таблиц, данные которых будут экспортироваться по DDE.</para>
		  		<code language="C#">
		     		trader.DdeTables = new[] { trader.SecuritiesTable, trader.MyTradesTable, trader.EquityPositionsTable, trader.EquityPortfoliosTable, trader.OrdersTable };
		     </code>
		  	</content>
		  </step>
		  <step>
			  <content>
				  <para>
					  После создания шлюза необходимо подключиться к торговой системе, используя метод
					  <codeEntityReference qualifyHint="true">M:StockSharp.BusinessEntities.IConnector.Connect</codeEntityReference>. Данный метод асинхронный,
					  то есть результат его выполнения не гарантирует мгновенное установление соединения. Для точного определения, что соединение было
					  установлено, необходимо использовать событие <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.Connected</codeEntityReference>:
				  </para>
				  <code language="C#">// подписываемся на событие успешного подключения
// все действия необходимо производить только после подключения
trader.Connected += () =>
{
	Console.WriteLine("Подключение было произведено успешно.");

	// извещаем об успешном соединении
	waitHandle.Set();
};

Console.WriteLine("Производим подключение...");

trader.Connect();

// дожидаемся события об успешном соединении
waitHandle.WaitOne();</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>Далее, необходимо подписаться на события появления информации по инструментам (так программа получит сведения по бумаге Лукойл),
				  и портфелям (для выставления заявок). А также на событие появления Моих Сделок (сигнал пользователю о том, что произошла сделка по его
				  заявке):</para>
				  <code language="C#"><![CDATA[trader.NewPortfolios += portfolios =>
{
	if (_portfolio == null)
	{
		// находим нужный портфель и присваиваем его переменной _portfolio
		_portfolio = portfolios.FirstOrDefault(p => p.Name == account);

		if (_portfolio != null)
		{
			Console.WriteLine("Портфель {0} появился.", account);

			// если инструмент и стакан уже появились,
			// то извещаем об этом основной поток для выставления заявки
			if (_lkoh != null && _depth != null)
				waitHandle.Set();
		}
	}
};

// подписываемся на событие появление инструментов
trader.NewSecurities += securities =>
{
	if (_lkoh == null)
	{
		// находим Лукойл и присваиваем ее переменной lkoh
		_lkoh = securities.FirstOrDefault(sec => sec.Code == secCode);

		if (_lkoh != null)
		{
			Console.WriteLine("Инструмент Лукойл появился.");
			
			// запускаем экспорт стакана
			trader.RegisterMarketDepth(_lkoh);

			if (_portfolio != null)
				waitHandle.Set();
		}
	}
};

// подписываемся на событие появления моих новых сделок
trader.NewMyTrades += myTrades =>
{
	foreach (var myTrade in myTrades)
	{
		var trade = myTrade.Trade;
		Console.WriteLine("Сделка {0} по цене {1} по бумаге {2} по объему {3} в {4}.", trade.Id, trade.Price, trade.Security.Code, trade.Volume, trade.Time);
	}
};

// подписываемся на событие обновления стакана
trader.MarketDepthsChanged += depths =>
{
	if (_depth == null && _lkoh != null)
	{
		_depth = depths.FirstOrDefault(d => d.Security == _lkoh);

		if (_depth != null)
		{
			Console.WriteLine("Стакан Лукойла появился.");

			// если портфель уже появился, то извещаем об этом основной поток для выставления заявки
			if (_portfolio != null)
				waitHandle.Set();
		}
	}
};]]></code>
				<para>
					В обработчике <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewSecurities</codeEntityReference> запускается
					экспорт стакана для того, чтобы начали обновляться такие поля как
					<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.BestBid</codeEntityReference>,
					<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.BestAsk</codeEntityReference> и
					<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.BestPair</codeEntityReference>. Подробнее, в разделе
					<link xlink:href="ad145f75-a2d4-4766-af60-79489b84846c">Экспорт стакана</link>.
				</para>
				<alert class="caution">
					<para>
						Номер счета, который в примере записан в переменную <legacyBold>account</legacyBold>, это <legacyBold>не логин</legacyBold> в
						<token>quik</token>, а код клиента. Об особенности портфелей в Quik читайте в соответствующем <link xlink:href="65485c7c-0697-4e00-ac3f-bfaf4f81cc9e">разделе</link>.
					</para>
				</alert>
				 <para>
					  Когда данные начнут приходить в <codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference>, то будут вызываться
					  события <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewSecurities</codeEntityReference>,
					  <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewOrders</codeEntityReference> и т.д. Для тех данных,
					  которые изменяются, вызывается другое событие. Например, для заявок, у которых изменяются значения Состояние, Остаток и т.д. будет
					  вызвано событие <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.OrdersChanged</codeEntityReference>.
				  </para>
				  <para>
					  Независимо от того, созданы ли данные программно, например, заявки, или же пользователь сам вручную зарегистрировал заявку, для новых
					  данных в таблице Заявки будет вызвано событие <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewOrders</codeEntityReference>.
					  Это очень удобно в случае, когда пользователь отменяет выставленную заявку, и программа продолжает работать с актуальными данными.
				  </para>
				
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>Торговый алгоритм робота:</para>
				  <code language="C#"><![CDATA[// 0.1% от изменения цены
const decimal delta = 0.001m;

// запоминаем первоначальное значение середины спреда
var firstMid = lkoh.BestPair.SpreadPrice / 2;
if (_lkoh.BestBid == null)
	throw new Exception("Нет лучшего бида для котировки.");

Console.WriteLine("Первоначальное значение середины спреда {0:0.##}", _lkoh.BestBid.Price + firstMid);

while (true)
{
	var mid = _lkoh.BestPair.SpreadPrice / 2;

	// если спред вышел за пределы нашего диапазона
	if	(
			((firstMid + firstMid * delta) <= mid) ||
			((firstMid - firstMid * delta) >= mid)
		)
	{
		var order = new Order
		{
			Portfolio = _portfolio,
			Price = _lkoh.ShrinkPrice(lkoh.BestBid + mid),
			Security = _lkoh,
			Volume = 1,
			Direction = OrderDirections.Buy,
		};
		trader.RegisterOrder(order);
		Console.WriteLine("Заявка {0} зарегистрирована", order.Id);
		break;
	}
	else
		Console.WriteLine("Текущее значение середины спреда {0:0.##}", _lkoh.BestBid.Price + mid);

	// ждем 1 секунду
	Thread.Sleep(1000);
}]]></code>
			  </content>
		  </step>
		  
		  <step>
			  <content>
				  <para>Завершение работы алгоритма:</para>
				  <code language="C#">
						// останавливаем подключение
						trader.Disconnect();;</code>
			  </content>
		  </step>
      </steps>
    </procedure>
    
    <!--<section>
      <title>Optional section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <nextSteps>
			<nextStep><link xlink:href="6267fec7-64e5-4488-ba08-c72cf61fcc9e">Снятие заявок</link></nextStep>
			<nextStep><link xlink:href="4b427409-9aa9-41d3-bb97-98745d1bba8e">Замена заявок</link></nextStep>
    </nextSteps>
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>