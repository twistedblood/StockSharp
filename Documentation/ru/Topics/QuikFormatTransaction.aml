<?xml version="1.0" encoding="utf-8"?>
<topic id="0b0bd6e0-7ddf-407d-9e03-a218796163af" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
      <para>
		  Регистрация, снятие и изменение заявок в <codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference> осуществляется через отправку 
		  специальных транзакций в <token>quik</token>. Данные транзакции представляют собой особым образом оформленные строки. В некоторых случаях
		  требуется модификация такой строки транзакции, прежде чем она будет отправлена в <token>quik</token>. Например, это требуется для регистрация
		  заявок в <token>rtsstandard</token>, где необходимо удалить параметр <legacyItalic>EXECUTION_CONDITION</legacyItalic>. Для этого существует
		  специальное событие <codeEntityReference qualifyHint="true">E:StockSharp.Quik.QuikTrader.FormatTransaction</codeEntityReference>. 
		  Данное событие передает <codeEntityReference>T:StockSharp.Quik.Transaction</codeEntityReference>. Это вспомогательный класс, который упрощает
		  работу со строкой транзакции. Для того, чтобы из данного класса посмотреть, как в итоге будет выглядеть <token>quik</token>-транзакция, нужно
		  вызвать метод <codeEntityReference qualifyHint="true">M:StockSharp.Quik.Transaction.ToString</codeEntityReference>.
	  </para>
    </introduction>

    <prerequisites>
      <content>
        <para>
			<link xlink:href="b6fea084-f43c-4eb7-ab63-ad3031d748a5">Создание первой стратегии</link>
		</para>
      </content>
    </prerequisites>
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Регистрация заявки в РТС Стандарт</title>

      <steps class="ordered">
        <step>
          <content>
			  <para>
				  Данный код написан в примере SampleConsole и закомментирован. Если необходима работа с <token>rtsstandard</token>, то его необходимо расскомментировать:
			  </para>
			  <code language="C#">trader.FormatTransaction += transaction => transaction.RemoveInstruction(Transaction.ExecutionCondition);</code>
          </content>
        </step>
      </steps>
    </procedure>
    
    <section>
      <title>История транзакций</title>

      <content>
        <para>
			<codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference> хранит в себе все транзакции, прошедшие через него в <token>quik</token>.
			Если в процессе тестирования необходимо получить данную информацию (например, для детального разбора ошибок), то можно использовать метод
			<codeEntityReference>M:StockSharp.Quik.QuikTrader.GetTransaction(System.Int64)</codeEntityReference>, возвращающий
			<codeEntityReference>T:StockSharp.Quik.Transaction</codeEntityReference> по номеру.
		</para>
      </content>
    </section>

    <relatedTopics>
      
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>