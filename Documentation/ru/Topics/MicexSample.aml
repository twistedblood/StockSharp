<?xml version="1.0" encoding="utf-8"?>
<topic id="356a822b-a4ed-42a9-8e7f-dfa595a15432" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
		<para>
			Пример работы с <codeEntityReference qualifyHint="false">T:StockSharp.Micex.MicexTrader</codeEntityReference> демонстрирует приложение SampleMicex, показанное на рисунке ниже.
			Исходные коды примера лежат в дистрибутиве в папке <legacyItalic>Samples/Micex</legacyItalic>.
		</para>
		
		<mediaLink><image placement="center" xlink:href="MicexSample"/></mediaLink>
	</introduction>
	
		<procedure>
				<steps class="ordered">
					<step>
						<content>
							<para>Создаем экземпляр класса шлюза <codeEntityReference qualifyHint="false">T:StockSharp.Micex.MicexTrader</codeEntityReference>, задаем адрес
							сервера и идентификатор доступа (Trader.Server), логин, пароль, уровень сжатия данных, интерфейс торговой системы ММВБ, а также число котировок
							в стакане:</para>
            				<code language="C#">
            				<![CDATA[
// создаем подключение            				
public readonly MicexTrader Trader = new MicexTrader();

Trader.Addresses = new[] { Address.Text.To<EndPoint>() };
Trader.Server = Server.Text;
Trader.Login = Login.Text;

if (!Password.Password.IsEmpty())
	Trader.Password = Password.Password;

Trader.CompressionLevel = (CompressionLevels)Compression.SelectedValue;
Trader.Interface = Interface.Text;
Trader.OrderBookDepth = Depth.Text.To<int>();

						]]>
							</code>
						</content>
					</step>

					<step>
						<content>
							<para>Устанавливаем обработчики событий <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference>. 
							В обработчике события <codeEntityReference qualifyHint="false">E:StockSharp.BusinessEntities.IConnector.Connected</codeEntityReference> 
							подписываемся на получение новостей при помощи метода <codeEntityReference qualifyHint="false">M:StockSharp.BusinessEntities.IConnector.RegisterNews</codeEntityReference>,
							а в обработчике события <codeEntityReference qualifyHint="false">E:StockSharp.BusinessEntities.IConnector.NewSecurities</codeEntityReference>
							запускаем экспорт тиковых сделок методом 
							<codeEntityReference qualifyHint="false">M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference>, 
							если "взведен" сооветствующий флаг:</para>
            				<code language="C#">
            				<![CDATA[
// инициализируем механизм переподключения
Trader.ReConnectionSettings.WorkingTime = ExchangeBoard.Micex.WorkingTime;
Trader.Restored += () => this.GuiAsync(() => MessageBox.Show(this, LocalizedStrings.Str2958));

// подписываемся на событие успешного соединения
Trader.Connected += () =>
{
	this.GuiAsync(() => ChangeConnectStatus(true));

	// запускаем подписку на новости
	Trader.RegisterNews();
};

// подписываемся на событие разрыва соединения
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	ChangeConnectStatus(false);
	MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
});

// подписываемся на событие успешного отключения
Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// подписываемся на ошибку обработки данных (транзакций и маркет)
Trader.Error += error =>
	this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

// подписываемся на ошибку подписки маркет-данных
Trader.MarketDataSubscriptionFailed += (security, type, error) =>
	this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(type, security)));

var ticksSubscribed = false;

Trader.NewSecurities += securities =>
{
	// запускаем экспорт всех тиков
	if (!ticksSubscribed)
	{
		Trader.RegisterTrades(securities.First());
		ticksSubscribed = true;
	}

	_securitiesWindow.SecurityPicker.Securities.AddRange(securities);
};

Trader.NewTrades += trades => _tradesWindow.TradeGrid.Trades.AddRange(trades);
Trader.NewOrders += orders => _ordersWindow.OrderGrid.Orders.AddRange(orders);
Trader.NewMyTrades += trades => _myTradesWindow.TradeGrid.Trades.AddRange(trades);
Trader.NewPortfolios += portfolios => _portfoliosWindow.PortfolioGrid.Portfolios.AddRange(portfolios);
Trader.NewPositions += positions => _portfoliosWindow.PortfolioGrid.Positions.AddRange(positions);

// подписываемся на событие о неудачной регистрации заявок
Trader.OrdersRegisterFailed += OrdersFailed;

// подписываемся на событие о неудачном снятии заявок
Trader.OrdersCancelFailed += OrdersFailed;

Trader.NewNews += news => _newsWindow.NewsPanel.NewsGrid.News.Add(news);

// устанавливаем поставщик маркет-данных
_securitiesWindow.SecurityPicker.MarketDataProvider = Trader;

	]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>Выполняем подключение:</para>
            				<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>При успешном подключении можно ожидать поступления событий:</para>
							<list class="bullet">
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewSecurities</codeEntityReference>.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewPortfolios</codeEntityReference>.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrades</codeEntityReference> - в случае подписки на сделки.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewNews</codeEntityReference>.</para>
								</listItem>
							</list>
						</content>
					</step>
					<step>
						<content>
							<para>Так выглядит окно инструментов, в котором можно открыть стакан и окно выставления заявки при помощи соответствующих кнопок.</para>
							<mediaLink><image placement="center" xlink:href="MicexSampleSecirities"/></mediaLink>
						</content>
					</step>
					<step>
						<content>
							<para>Для запроса обновлений по стаканам необходимо воспользоваться методом 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
// начинаем получать котировки стакана
trader.RegisterMarketDepth(security);
							]]>
							</code>						
						</content>
					</step>
					<step>
						<content>
							<para>Для регистрации заявок предусмотрена кнопка «Новая заявка». Метод <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference> отправляет заявку на сервер:</para>
            				<code language="C#">
            				<![CDATA[
private void NewOrderClick(object sender, RoutedEventArgs e)
{
	var newOrder = new OrderWindow
	{
		Order = new Order { Security = SecurityPicker.SelectedSecurity },
		Connector = MainWindow.Instance.Trader,
	};

	if (newOrder.ShowModal(this))
		MainWindow.Instance.Trader.RegisterOrder(newOrder.Order);
}
		]]>
							</code>						
						</content>
					</step>

				</steps>
		</procedure>	
  </developerConceptualDocument>
</topic>