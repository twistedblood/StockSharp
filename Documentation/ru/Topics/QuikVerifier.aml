<?xml version="1.0" encoding="utf-8"?>
<topic id="32bb7203-202c-44f7-a6c4-79791c690a3a" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
      <para>
		  Для проверки правильности настроек <token>quik</token>, описанных в разделе <link xlink:href="5c13da7b-b6e4-4fd4-958a-66c93c58b941">Настройка Quik</link>,
		  в <token>stocksharp</token> входит утилита <legacyBold>Verifier</legacyBold> (находится в дистрибутиве в папке Verifier). Программа проверяет:
	  </para>
		<list class="ordered">
			<listItem>Включены ли Внешние Транзакции.</listItem>
			<listItem>Созданы ли все необходимые таблицы (Инструменты, Заявки и т.д.).</listItem>
			<listItem>Имеют ли данные таблицы правильные заголовки.</listItem>
			<listItem>Все ли колонки присутствуют в таблице и выстроены ли они в правильном порядке.</listItem>
		</list>
		<para>
			При запуске <legacyBold>Verifier</legacyBold> автоматически выводит список запущенных в данный момент терминалов <token>quik</token>.
			Если <token>quik</token> еще не запущен, необходимо его запустить, и нажать на кнопку <mediaLinkInline><image xlink:href="verifierrefresh"/></mediaLinkInline>
			для повторного нахождения процессов <token>quik</token>.
		</para>
		<para>
			В случае неправильности настроек одного из предыдущих пунктов, программа выводит сообщения в отдельных окнах или в таблицу:
		</para>
		<mediaLink>
			<image placement="center" xlink:href="verifiererror" />
		</mediaLink>
		<para>
			Если идет торговля с биржей, для которой отсутствует необходимая колонка в <token>quik</token>, то можно заменить колонку
			эквивалентной по типу данных (колонку с датой заменить на другой колонку с датой, с числом на число, с денежным выражением на
			денежное). В этом случае <legacyBold>Verifier</legacyBold> выводит предупреждение, но подтверждает правильность настроек:
		</para>
		<mediaLink>
			<image placement="center" xlink:href="verifierwarning" />
		</mediaLink>
		<para>
			Если все настройки сделаны правильно, программа выводит следующее:
		</para>
		<mediaLink>
			<image placement="center" xlink:href="verifiersuccess" />
		</mediaLink>
		<para>
			Иногда требуется модификация стандартных таблиц, как это показано в разделе <link xlink:href="4261879e-9bb3-482c-9fc5-27ecb07bdf5e">Экспорт дополнительных колонок</link>.
			В этом случае для проверки правильности настроек необходимо вызывать напрямую из разрабатываемого приложения метод <codeEntityReference qualifyHint="true">M:StockSharp.Quik.QuikTerminal.GetTableSettings(StockSharp.Quik.DdeTable[])</codeEntityReference>:
		</para>
		<code language="C#">this.OkResult.SetVisibility(false);
this.SettingErrors.Clear();

// ...

this.SettingErrors.AddRange(trader.Terminal.GetTableSettings());

if (this.SettingErrors.Count == 0)
	this.OkResult.SetVisibility(true);</code>
		<alert class="note">
			<para>
				Пример работы с данным методом находится в исходниках программы Verifier, которые также идут в дистрибутиве.
			</para>
		</alert>
	</introduction>

    <!--<prerequisites>
      <content>
        <para>Optional information on prerequisites</para>
      </content>
    </prerequisites>-->
    
    <!-- One or more procedure or section elements -->

    <!--<procedure>
      <title>Optional procedure</title>

      <steps class="ordered">
        <step>
          <content>
            <para>The first step of the procedure</para>
          </content>
        </step>
      </steps>
    </procedure>
    
    <section>
      <title>Optional section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <nextSteps>
      <content>
        <para>
			<link xlink:href="b6fea084-f43c-4eb7-ab63-ad3031d748a5">Создание первой стратегии</link>
		</para>
      </content>
    </nextSteps>
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>