<?xml version="1.0" encoding="utf-8"?>
<topic id="9cd10cbc-8534-4d44-bf3b-60b0a3f03590" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Пример работы с <codeEntityReference qualifyHint="false">T:StockSharp.LMAX.LmaxTrader</codeEntityReference> демонстрирует приложение SampleLMAX,
        показанное на рисунке ниже. Исходные коды примера лежат в дистрибутиве в папке <legacyItalic>Samples/LMAX</legacyItalic>.</para>
		
		<mediaLink><image placement="center" xlink:href="lmax_sample_main_window"/></mediaLink>
    </introduction>
    <procedure>
				<steps class="ordered">
					<step>
						<content>
							<para>В самом начале необходимо создать экземпляр класса шлюза <codeEntityReference qualifyHint="false">T:StockSharp.LMAX.LmaxTrader</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
// создаем шлюз
Trader = new LmaxTrader
{
	Login = Login.Text,
	Password = Password.Password,
	IsDemo = IsDemo.IsChecked == true
};
							]]>
							</code>
						</content>
					</step>

					<step>
						<content>
							<para>Далее следует установить требуемые обработчики событий <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
// инициализируем механизм переподключения (будет автоматически соединяться
// каждые 10 секунд, если шлюз потеряется связь с сервером)
Trader.ReConnectionSettings.Interval = TimeSpan.FromSeconds(10);
//Trader.ReConnectionSettings.WorkingTime = Exchange.Rts.WorkingTime;
Trader.ReConnectionSettings.ConnectionRestored += () => this.GuiAsync(() =>
{
	// разблокируем кнопку (соединение было восстановлено)
	ChangeConnectStatus(true);
	MessageBox.Show(this, "Соединение восстановлено.");
});

// подписываемся на событие успешного соединения
Trader.Connected += () =>
{
	// возводим флаг, что соединение установлено
	_isConnected = true;

	// разблокируем кнопку
	this.GuiAsync(() => ChangeConnectStatus(true));

	// скачиваем информацию о всех инструментах с сайта
	Trader.DownloadSecurities();
};

// подписываемся на событие разрыва соединения
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	ChangeConnectStatus(false);
	MessageBox.Show(this, error.ToString(), "Ошибка соединения");
});

Trader.ProcessDataError += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Ошибка обработки данных"));

Trader.NewSecurities += securities => this.GuiAsync(() => _securitiesWindow.AddSecurities(securities));

Trader.NewMyTrades += trades => this.GuiAsync(() => _myTradesWindow.Trades.AddRange(trades));
					
Trader.NewTrades += trades => this.GuiAsync(() => _tradesWindow.Trades.AddRange(trades));
					
Trader.NewOrders += orders => this.GuiAsync(() => _ordersWindow.Orders.AddRange(orders));
					
Trader.NewStopOrders += orders => this.GuiAsync(() => _stopOrdersWindow.Orders.AddRange(orders));
					
Trader.NewPortfolios += portfolios =>
{
	// регистрирует портфели на обновление данных
	portfolios.ForEach(Trader.RegisterPortfolio);

	_portfoliosWindow.Portfolios.AddRange(portfolios);
};
Trader.NewPositions += positions => this.GuiAsync(() => _positionsWindow.Positions.AddRange(positions));

// подписываемся на событие о неудачной регистрации заявок
Trader.OrdersRegisterFailed += OrdersFailed;
// подписываемся на событие о неудачном снятии заявок
Trader.OrdersCancelFailed += OrdersFailed;
// подписываемся на событие о неудачной регистрации стоп-заявок
Trader.StopOrdersRegisterFailed += OrdersFailed;
// подписываемся на событие о неудачном снятии стоп-заявок
Trader.StopOrdersCancelFailed += OrdersFailed;
// загружаем инструменты с сайта, если используется "боевое" подключение
Trader.IsDownloadSecurityFromSite = !Trader.IsDemo;

							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>Далее необходимо выполнить подключение к серверу <token>blackwood</token>:</para>
            				<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>После подключения можно ожидать срабатывания событий:</para>
							<list class="bullet">
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged</codeEntityReference> – 
									изменение инструмента (последней цены, цены спроса/предложения и т.д.) запрошенного через 
									<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference>.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.MarketDepthsChanged</codeEntityReference> – 
									изменение стакана, запрошенного с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference>.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrades</codeEntityReference> – 
									новые тики по подписанным с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> инструментам.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.PortfoliosChanged</codeEntityReference> – 
									изменение портфелей, запрошенное с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference>.</para>
								</listItem>
							</list>
						</content>
					</step>

					<step>
						<content>
							<para>Поиск инструментов (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">подробнее</link>):</para>
							
							<mediaLink><image placement="center" xlink:href="lmax_sample_securities"/></mediaLink>
            				
            				<code language="C#">
            				<![CDATA[
var criteria = new Security
{
	Currency = CurrencyTypes.USD,
	Code = SecCode.Text
};

MainWindow.Instance.Trader.LookupSecurities(criteria);
							]]>
							</code>
							
						</content>
					</step>

					<step>
						<content>
							<para>Для получения обновлений по выбранному инструменту необходимо вызвать метод
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
Trader.RegisterSecurity(SelectedSecurity);
							]]>
							</code>						
						</content>
					</step>

					<step>
						<content>
							<para>Для запроса обновлений по стаканам необходимо воспользоваться методом 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
private void QuotesClick(object sender, RoutedEventArgs e)
{
	var window = _quotesWindows.SafeAdd(SelectedSecurity, security =>
	{
		// начинаем получать котировки стакана
		MainWindow.Instance.Trader.RegisterMarketDepth(security);

		// создаем окно со стаканом
		var wnd = new QuotesWindow { Title = security.Code + " котировки" };
		wnd.MakeHideable();
		return wnd;
	});

	if (window.Visibility == Visibility.Visible)
		window.Hide();
	else
		window.Show();
}
							]]>
							</code>
							<mediaLink><image placement="center" xlink:href="lmax_sample_market_depth"/></mediaLink>
						</content>
					</step>

					<step>
						<content>
							<para>Для регистрации заявок предусмотрена кнопка «Новая заявка». 
							Метод <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference> отправляет заявку на сервер:</para>
            				<code language="C#">
            				<![CDATA[
private void Send_Click(object sender, RoutedEventArgs e)
{
    var order = new Order
    {
        Type = IsMarket.IsChecked == true ? OrderTypes.Market : OrderTypes.Limit,
        Portfolio = Portfolio.SelectedPortfolio,
        Volume = Volume.Text.To<decimal>(),
        Price = Price.Text.To<decimal>(),
        Security = Security,
        Direction = IsBuy.IsChecked == true ? OrderDirections.Buy : OrderDirections.Sell,
    };

    MainWindow.Instance.Trader.RegisterOrder(order);

    DialogResult = true;
}
							]]>
							</code>						
						</content>
					</step>

				</steps>
		</procedure>
  </developerWalkthroughDocument>
</topic>