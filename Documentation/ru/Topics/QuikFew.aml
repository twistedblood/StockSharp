<?xml version="1.0" encoding="utf-8"?>
<topic id="9fb00dd4-4f0a-42a9-ab0f-9946b7acf6fe" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			<token>stocksharp</token> позволяет работать с несколькими <token>quik</token>-ами одновременно из одного робота. К примеру, это необходимо, когда
			идет торговля на разных площадках через разных брокеров.
		</para>
    </introduction>

    <!--<prerequisites>
      <content>
        <para>Optional information on prerequisites</para>
      </content>
    </prerequisites>-->
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Пример работы с несколькими Quik-ами</title>

      <steps class="ordered">
		  <step>
			  <content>
				  <para>
					  В папку с программой необходимо поместить два файла <legacyItalic>TRANS2QUIK.dll</legacyItalic> (пример работает с 2-мя
					  <token>quik</token>-ами). Например, один будет иметь оригинальное название, а второй будет переименован <legacyItalic>TRANS2QUIK_2.dll</legacyItalic>.
					  Это обязательное требование работы с несколькими <token>quik</token>-ами из одной программы: один <token>quik</token> - одна dll.
				  </para>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  После этого, идет создание нескольких <codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference>. Через свойство
					  <codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.DdeServer</codeEntityReference> передается
					  уникальное имя для <token>dde</token> сервера, а через
					  <codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.DllName</codeEntityReference> путь к <legacyItalic>TRANS2QUIK.dll</legacyItalic>:
				  </para>
				  <code language="C#">var quikTrader1 = new QuikTrader { Path = path1, DdeServer = "quik1" };
var quikTrader2 = new QuikTrader { Path = path2, DdeServer = "quik2", DllName = @"TRANS2QUIK_2.dll" };
				
// если вторая dll находится в другой папке, то можно создать шлюз, указав путь к dll
// var quikTrader2 = new QuikTrader { Path = path2, DdeServer = "quik2", DllName = @"Folder1\TRANS2QUIK_2.dll" };</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Когда <codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference>-ы созданы, идет обычная работа с каждом из них:
				  </para>
				  <code language="C#"><![CDATA[// подписываемся на событие ошибок обработки данных и разрыва соединения
//
quikTrader1.ProcessDataError += OnError;
quikTrader2.ProcessDataError += OnError;

quikTrader1.ConnectionError += OnError;
quikTrader2.ConnectionError += OnError;


var portfoliosWait = new ManualResetEvent(false);

Action<IEnumerable<Portfolio>> newPortfolios = portfolios =>
{
	if (_portfolio1 == null)
		_portfolio1 = portfolios.FirstOrDefault(p => p.Name == account1);

	if (_portfolio2 == null)
		_portfolio2 = portfolios.FirstOrDefault(p => p.Name == account2);

	// если оба инструмента появились
	if (_portfolio1 != null && _portfolio2 != null)
		portfoliosWait.Set();
};

// подписываемся на события новых портфелей
quikTrader1.NewPortfolios += newPortfolios;
quikTrader2.NewPortfolios += newPortfolios;


var securitiesWait = new ManualResetEvent(false);

Action<IEnumerable<Security>> newSecurities = securities =>
{
	if (_lkoh == null)
		_lkoh = securities.FirstOrDefault(s => s.Code == "LKOH" && s.Trader == quikTrader1);

	if (_riz0 == null)
		_riz0 = securities.FirstOrDefault(s => s.Code == "RIZ0" && s.Trader == quikTrader2);

	// если оба инструмента появились
	if (_lkoh != null && _riz0 != null)
		securitiesWait.Set();
};

// подписываемся на события новых инструментов
quikTrader1.NewSecurities += newSecurities;
quikTrader2.NewSecurities += newSecurities;


// запускаем экспорты в Quik-ах, когда получим событие об успешном соединении
//
quikTrader1.Connected += () => quikTrader1.StartExport(new[] {quikTrader1.SecuritiesTable});
quikTrader2.Connected += () => quikTrader2.StartExport(new[] {quikTrader2.SecuritiesTable});

// производим подключение каждого из QuikTrader-а
//
quikTrader1.Connect();
quikTrader2.Connect();

Console.WriteLine("Дожидаемся появления инструментов и портфелей...");
portfoliosWait.WaitOne();
securitiesWait.WaitOne();

Console.WriteLine("Информация появилась. Производим регистрацию заявок...");

if (_lkoh.BestBid == null || _riz0.BestBid == null)
	throw new Exception("Нет лучшего бида для котировки.");

quikTrader1.RegisterOrder(new Order
{
	Portfolio = _portfolio1,
	Volume = 1,
	Security = _lkoh,
	Price = _lkoh.BestBid.Price
});
Console.WriteLine("Заявка на LKOH зарегистрирована");

quikTrader2.RegisterOrder(new Order
{
	Portfolio = _portfolio2,
	Volume = 1,
	Security = _riz0,
	Price = _riz0.BestBid.Price
});
Console.WriteLine("Заявка на RIZ0 зарегистрирована");]]></code>
			  </content>
			<alert class="caution">
				<para>
					Номера счетов, которые в примере записаны в переменные <legacyBold>account1</legacyBold> и <legacyBold>account2</legacyBold>, это <legacyBold>не логины</legacyBold> в
					<token>quik</token>, а коды клиентов. Об особенности портфелей в Quik читайте в соответствующем <link xlink:href="65485c7c-0697-4e00-ac3f-bfaf4f81cc9e">разделе</link>.
				</para>
			</alert>
		  </step>
		  <step>
			  <content>
				  <para>
					  Для более удобной работы с несколькими <codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference>-ами
					  <token>stocksharp</token> предоставляет <link xlink:href="1cfb4f7c-b9fc-43da-a958-b0e0f881479d" />.
				  </para>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Исходные коды примера лежат в папке <legacyItalic>SampleFewQuiks</legacyItalic>.
				  </para>
			  </content>
		  </step>
      </steps>
    </procedure>

	  <!--<section>
      <title>Optional section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <nextSteps>
      <content>
        <para>
			<link xlink:href="52cb16e3-0ff0-4e82-8ad5-73a2e6e918a1">Включение и выключение Quik</link>
		</para>
      </content>
    </nextSteps>
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>