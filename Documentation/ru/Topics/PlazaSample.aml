<?xml version="1.0" encoding="utf-8"?>
<topic id="81726182-1017-4eca-b349-03b77056a485" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
		<para>
			Для демонстрации возможностей платформы <token>plaza</token> написан пример под названием SamplePlaza (находится в папке <legacyItalic>Samples/Plaza</legacyItalic>).
			В нем показано, как подключаться к шлюзу <token>plaza</token>, получать инструменты и размещать заявки. 
		</para>
		<!--
		<alert class="caution">
			<para>
				<token>Plaza</token> имеет те же ограничения на разрядность операционной системы, что и <token>quik</token>. Приложение необходимо компилировать
				под 32 бита. Как это сделать показано в <link xlink:href="b6fea084-f43c-4eb7-ab63-ad3031d748a5"/>.
			</para>
		</alert>
		-->
    </introduction>

    <prerequisites>
      <content>
        <para>
			<link xlink:href="7f488b0b-0f59-42b4-845b-fd766f5699dc"/>
		</para>
      </content>
    </prerequisites>
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Пример робота под Plaza II</title>

      <steps class="ordered">
		  <step>
			  <content>
				  <para>
					  В самом начале необходимо создать шлюз <codeEntityReference>T:StockSharp.Plaza.PlazaTrader</codeEntityReference>:
				  </para>
				  <code language="C#"><![CDATA[// создаем шлюз к Плазе
var Trader = new PlazaTrader(this.Address.Text.To<IPEndPoint>());

// Если роутер плазы (P2MQRouter.exe) установлен на локальном компьютере, можно использовать конструктор без параметров:
var Trader = new PlazaTrader();]]></code>
				<alert class="note">
					При соединении между клиентским приложением и роутером в платформе <token>plaza</token> возможно использование 
					протокола TCP или LRPCQ. Последний является простым транспортом, основанным на использовании 
					shared-memory в ОС Windows. Использование LRPCQ возможно только при запуске приложения-клиента и роутера на одном компьютере. 
					Протокол LRPCQ имеет меньшие накладные расходы, чем TCP, передача сообщений между приложением и роутером 
					с использованием LRPCQ происходит быстрее.  Чтобы использовать протокол LRPCQ, нужно присвоить свойству 
					<codeEntityReference qualifyHint="true">P:StockSharp.Plaza.PlazaTrader.UseLocalProtocol</codeEntityReference> 
					значение true.  По умолчанию оно равно false, то есть используется протокол TCP.
				</alert>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Если для подключения требуется указать логин и пароль, то их необходимо передать в
					  <codeEntityReference qualifyHint="true">P:StockSharp.Plaza.PlazaTrader.Login</codeEntityReference> и
					  <codeEntityReference qualifyHint="true">P:StockSharp.Plaza.PlazaTrader.Password</codeEntityReference>:
				  </para>
				  <alert class="caution">Если при установке роутера был введен логин и пароль, то в коде их указывать <legacyBold>не надо</legacyBold>.</alert>
				  
				  <code language="C#">this.Trader.Login = this.Login.Text;
this.Trader.Password = this.Password.Password;</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  После создания шлюза необходимо подключиться к торговой системе. В случае с <codeEntityReference>T:StockSharp.Plaza.PlazaTrader</codeEntityReference>
					  такой системой выступает P2MQRouter.exe.
				  </para>
				  <para>
					  После подключения начнут вызываться события <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewSecurities</codeEntityReference>,
					  <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewOrders</codeEntityReference> и т.д. Для тех данных,
					  которые изменяются, вызывается другое событие. Например, для заявок, у которых изменяются значения Состояние, Остаток и т.д. будет
					  вызвано событие <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.OrdersChanged</codeEntityReference>.
				  </para>
				  <code language="C#">
						// подписываемся на событие успешного соединения
						Trader.Connected += () =>
						{
							this.GuiAsync(() => ChangeConnectStatus(true));
						};
							...
						trader.Connect();
				  </code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Для просмотра списка инструментов используется окно Инструменты (SecuritiesWindow.xaml).  Чтобы в нем отображались ценные бумаги,
					  необходимо внутри метода Connect_Click класса MainWindow подписаться на событие 
					  <codeEntityReference>E:StockSharp.BusinessEntities.IConnector.NewSecurities</codeEntityReference>.
				  </para>
				  <code language="C#">this.Trader.NewSecurities += securities => this.GuiAsync(() => _securitiesWindow.AddSecurities(securities));</code>
			  </content>
		  </step>
		  <step>
			  <content>
			  	<para>Для просмотра стаканов нужно в окне Инструменты щелкнуть на кнопке Стакан:</para>
				<code language="C#">
// внутри метода Quotes_Click
var window = _quotesWindows.SafeAdd(SelectedSecurity, security =>
{
	// начинаем получать котировки стакана
	trader.RegisterMarketDepth(security);

	// создаем окно со стаканом
	var wnd = new QuotesWindow { Title = security.Code + " котировки" };
	wnd.MakeHideable();
	return wnd;
});</code>
				</content>
		  </step>
		  <step>
			  <content>
			  	<para>Создание заявок (используется класс NewOrderWindow):</para>
			  	<code language="C#"><![CDATA[
// внутри метода Send_Click
var order = new Order
{
	Portfolio = Portfolio.SelectedPortfolio,
	Volume = Volume.Text.To<decimal>(),
	Price = Price.Text.To<decimal>(),
	Security = Security,
	Direction = IsBuy.IsChecked == true ? OrderDirections.Buy : OrderDirections.Sell,
};

MainWindow.Instance.Trader.RegisterOrder(order);
]]>
				</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>Освобождение занятых ресурсов:</para>
				  <code language="C#">Trader.Dispose();</code>
			  </content>
		  </step>
      </steps>
    </procedure>
    
    <!--<section>
      <title>Optional section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <nextSteps>
      <content>
        <para>
			<link xlink:href="9d3b0442-0633-4ba5-97e1-22829adcd025"/>
		</para>
      </content>
    </nextSteps>
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerConceptualDocument>
</topic>